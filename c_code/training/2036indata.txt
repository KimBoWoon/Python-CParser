

#include <stdio.h>
#include <stdlib.h>

void findNearest(const int* set, const int key, const int start, const int end,
	int* diff2, int* count2);
int compare(const void* a, const void* b);

int main(void)
{
	FILE *f = fopen("input.txt", "r");
	if (f == NULL) {
		printf("ERROR\n");
		exit(1);
	}

	int testCase = 0; 
	int n = 0; 
	int K = 0; 
	int i = 0, j = 0; 
	int diff = 0; 
	int count = 0; 
	int diff2 = 0;
	int count2 = 0;
	
	fscanf(f, "%d", &testCase); 

	while (testCase--) {
		int left = 0;
		int right = 0;
		int mid = 0;
		int key = 0;
		int tmp[3] = { 0 };

		fscanf(f, "%d %d", &n, &K); 

		int* arr_S; 
		arr_S = (int*)calloc(n, sizeof(int)); 

		for (i = 0; i < n; i++) { 
			fscanf(f, "%d", &arr_S[i]);
		}

		qsort(arr_S, n, sizeof(int), compare); 

		diff = abs(arr_S[0] + arr_S[1] - K); 
		count = 0; 


		for (i = 0; i < n-1; i++) {
			key = K - arr_S[i];
			left = i + 1;
			right = n - 1;
			mid = 0;
			diff2 = -1;
			count2 = 0;			

			findNearest(arr_S, key, left, right, &diff2, &count2);

			if (i == 0) {
				diff = diff2;
				count = count2;
			}
			else {
				if (diff == diff2) {
					count += count2;
				}
				if (diff > diff2) {
					diff = diff2;
					count = count2;
				}
			}

		}
		
		printf("%d\n", count);
		free(arr_S);
	}

	fclose(f);
	return 0;

}

void findNearest(const int* set, const int key, const int start, const int end,	int* diff2, int* count2) {
	int left = start;
	int right = end;
	int mid = 0;
	int i;

	int tmp[3] = { 0 };	

	if (left > right) {
		return;
	}

	while (left <= right) {
		mid = (left + right) / 2;
		if (set[mid] == key) {
			break;
		}
		if (key < set[mid]) {
			right = mid - 1;
			continue;
		}
		if (key > set[mid]) {
			left = mid + 1;
			continue;
		}
	}

	tmp[0] = (mid - 1 >= start) ? abs(key - set[mid - 1]) : -1;
	tmp[1] = abs(key - set[mid]);
	tmp[2] = (mid + 1 <= end) ? abs(key - set[mid + 1]) : -1;

	if (set[mid] == key) {
		*diff2 = tmp[1];
		*count2 = 1;
		return;
	}

	*diff2 = tmp[1];
	*count2 = 0;

	for (i = 0; i<3; i++) { 
		if (tmp[i] != -1 && tmp[i] < *diff2) {
			*diff2 = tmp[i];
		}
	}
	for (i = 0; i<3; i++) { 
		if (tmp[i] == *diff2) {
			(*count2)++;
		}
	}
}

int compare(const void* a, const void* b) {
	return *(int*)a - *(int*)b;
}