

#include <iostream>
#include <fstream>

using namespace std;

void quickSort(int numbers[], int array_size);
void q_sort(int numbers[], int left, int right);

class TN
{
    int num,k;
    int *arr;
    int criteria;
    int nearest_diff,nearest_num;
    
public:
    TN(int num,int k){ this->num=num; this->k=k; }
    void inputNum(ifstream *file);
    int result_num();
    ~TN(){ delete arr;}
    
};

void TN::inputNum(ifstream *file)
{
    arr=new int[num];
    
    for(int i=0; i<num; i++)
        *file>>arr[i];
    
    quickSort(arr,num);
    
    for(int i=0; i<num; i++)
        if(arr[i]>k/2){ criteria=i; break; }
    
}

int TN::result_num()
{
    if(k/2<=arr[0])
        return 1;

    if(k/2>=arr[num-1])
        return  1;
    
    int big_pos=criteria;
    int little_pos=criteria-1;
    
    nearest_diff=nearest_num=0;
    
    int little_diff= arr[little_pos] + arr[little_pos-1] -k;
    int big_diff= arr[big_pos]+arr[big_pos+1] -k;
    
    little_diff= (little_diff > 0  )? little_diff : -little_diff;
    big_diff= (big_diff > 0 )? big_diff:-big_diff;
    
    if(little_diff==big_diff)
    {nearest_diff=little_diff; nearest_num=2; }

    else
    { nearest_diff =  (little_diff<big_diff) ?  little_diff:big_diff; nearest_num=1;  }
    
    int i=0;
    
    while( -1<little_pos && big_pos<num)
    {
            int s = arr[little_pos]+arr[big_pos];
        
            int diff = (s-k >0) ? (s-k ): (k-s) ;
            
            if(diff<nearest_diff)
            { nearest_diff=diff; nearest_num=1; }

            else if(diff==nearest_diff )
                nearest_num++;
                
        if(s<k)
            big_pos++;
        
        else if(s>k)
            little_pos--;
        else
        { little_pos--; big_pos++; }
        
    }
    
  return nearest_num;
    
}

int main()
{
    
    ifstream file;
    
    file.open("input.txt");
    
    if(file.is_open()==false) 
        cout<<"입력파일이 없습니다."<<endl;
    
    else
    {
        int case_num;
        file>>case_num;
        
        for(int i=0; i<case_num; i++)
        {
            int num,k;
            file>>num>>k;
            
            TN tn(num,k);
            tn.inputNum(&file);
            cout<<tn.result_num()<<endl;
            
        }
        
    }
    
    file.close();
    
}

void quickSort(int numbers[], int array_size)
{
    q_sort(numbers, 0, array_size -1);
}

void q_sort(int numbers[], int left, int right)
{
    int pivot, l_hold, r_hold;
    l_hold = left;
    r_hold = right;
    pivot = numbers[left]; 
    while (left < right)
    {
        while ((numbers[right] >= pivot) && (left < right))
            right --;

        if (left != right)
        {
             numbers[left] = numbers[right];
        }
        while ((numbers[left] <= pivot) && (left < right))
            left ++;
        if (left != right)
        {
             numbers[right] = numbers[left];
             right --;
        }
    }
    numbers[left] = pivot;
    pivot = left;
    left = l_hold;
    right = r_hold;

    if (left < pivot)
        q_sort(numbers, left, pivot - 1);
    if (right > pivot)
        q_sort(numbers, pivot+1, right);
}
