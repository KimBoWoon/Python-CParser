#include <stdio.h>
#include <stdlib.h>

void Swap(int arr[],int idx1, int idx2);
int Partition(int arr[], int left,int right);
void QuickSort(int arr[],int left, int right);

int main()
{
	FILE *fp;
	int i,j,k,numTestCases;
	fp=fopen("input.txt","r");
	if(fp==NULL) exit(1);

	fscanf(fp,"%d",&numTestCases);

	for(i=0; i<numTestCases; i++)
	{
		int count,K;
		fscanf(fp,"%d %d",&count,&K);
		int number;
		int min,num;
		int cnt=1,j;
		int index=1;
		int set[1000000]={0,};
		int p=count-1;
		for(j=0; j<count; j++){
			fscanf(fp,"%d",&number);
			set[j]=number;
		}
		QuickSort(set,0,count-1);
		min=set[0]+set[count-1];
		if(min>=K){
			min=min-K;
		}
		else{
			min=K-min;
		}
		while(index!=p)
		{
			num=(set[index]+set[p]);
			if(num>=K){
				num=num-K;
			}
			else{
				num=K-num;
			}
			if(min>num){
				min=num;
				cnt=0;
				cnt++;
			}
			else if(min==num){
				cnt++;
			}
			if((set[index]+set[p])>K){
				p--;
			}
			else{
				index++;
			}
		}
		printf("%d\n",cnt);
	}
	fclose(fp);
	return 0;
}


void Swap(int arr[],int idx1, int idx2)
{
	int temp=arr[idx1];
	arr[idx1]=arr[idx2];
	arr[idx2]=temp;
}

int Partition(int arr[],int left, int right)
{
	int pivot=arr[left];
	int low=left+1;
	int high=right;

	while(low<=high)
	{
		while(pivot>arr[low])
			low++;
		while(pivot<arr[high])
			high--;
		if(low<=high)
			Swap(arr,low,high);
	}
	Swap(arr,left,high);
	return high;
}

void QuickSort(int arr[],int left,int right)
{
	if(left<=right)
	{
		int pivot=Partition(arr,left,right);
		QuickSort(arr,left,pivot-1);
		QuickSort(arr,pivot+1,right);
	}
}