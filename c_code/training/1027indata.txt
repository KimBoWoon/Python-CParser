

#include <iostream>
#include <fstream>

using namespace std;

class DucciSequence    
{
    int n;
    int *num;
    
public:
    DucciSequence(int n){ this->n=n; num=new int[n]; }  
    void input_num(ifstream *file);
    void do_ducci();
    ~DucciSequence(){delete num;}
    
    
};

void DucciSequence::input_num(ifstream *file)   
{
    for(int i=0; i<n; i++)
        *file>>num[i];
}

void DucciSequence::do_ducci()  
{
    bool pattern_flag=false;
    int *pattern=new int[n];    
    
    while(true){
        
        int num0=num[0];
        
        for(int i=0; i<n; i++)    
        {
            if(i==n-1)
                num[i]=((num0-num[i])>=0)? num0-num[i] : num[i]-num0;
            else
                num[i]=((num[i+1]-num[i])>=0)? num[i+1]-num[i] : num[i]-num[i+1];
            
        }
        
        int is_zero=0;
        int d_num=0;
        int cnt=0;
        
        for(cnt=0; cnt<n; cnt++)    
        {
            if(num[cnt]==0) is_zero++;
            else{  if(d_num==0) d_num=num[cnt];  else{ if(d_num!=num[cnt]) break; } }
        }
        
        
        if(cnt==n)
        {
            if(is_zero==n)     
            {  cout<<"ZERO"<<endl; break; }
            
            if(!pattern_flag)   
            {  for(int i=0; i<n; i++)pattern[i]=num[i];  pattern_flag=true; }
            else             
            {   int k;
                for(k=0; k<n; k++) if(pattern[k]!=num[k])break;
                
                if(k==n){ cout<<"LOOP"<<endl; break;}
                
                
            }
        }
        
        
    }
    
    delete pattern;
    
    
    
}
int main()
{
    
    ifstream file;
    
    file.open("input.txt");
    
    if(file.is_open()==false) 
        cout<<"입력파일이 없습니다."<<endl;
    
    else
    {
        int case_num;
        file>>case_num;
        
        for(int i=0; i<case_num; i++)
        {
            int n;
            file>>n;
            DucciSequence du(n);
            du.input_num(&file);
            du.do_ducci();
            
        }
        
    }
    
    file.close();
    
}
