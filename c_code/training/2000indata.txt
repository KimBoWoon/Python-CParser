
#include <iostream>
#include <fstream>

using namespace std;

void swap(int arr[], int a, int b)
{
	int temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
}
int Partition(int *arr, int left, int right)
{
	int pivot = arr[left];
	int bottom = left + 1;
	int top = right;

	while (bottom <= top)
	{
		while (pivot>arr[bottom])
			bottom++;
		while (pivot<arr[top])
			top--;
		if (bottom <= top)
			swap(arr, bottom, top);
	}
	swap(arr, left, top);
	return top;
}
void QuickSort(int *arr, int left, int right)
{
	if (left <= right)
	{
		int pivot = Partition(arr, left, right);
		QuickSort(arr, left, pivot - 1);
		QuickSort(arr, pivot + 1, right);
	}
}
void binary_search(int* numbers, int count, const int target) {

	int left = 0;
	int right = count - 1;
	int diff = 0;
	int abs_diff = 0;
	int result_diff = 99999999999;
	int result_count = 0;
	while (1) {
		if (right <= left) {
			break;
		}
		diff = target - (numbers[left] + numbers[right]);
		diff = diff > 0 ? diff : diff * -1;
		if (result_diff > diff) {
			result_diff = diff;
			result_count = 1;
		}
		else if (result_diff == diff) {
			result_count++;
		}
		if ((numbers[left] + numbers[right]) > target) {
			right--;
		}
		else {
			left++;
		}
	}
	cout << result_count << endl;
}


int main(void) {

	 ifstream inFile("input.txt");

	int testCases = 0;
	inFile >> testCases;

	for (int i = 0; i < testCases; i++) {

		int count = 0;
		int target = 0;
		int *numbers = NULL;

		inFile >> count >> target;

		numbers = new int[count];
		for (int i = 0; i < count; i++) {
			inFile >> numbers[i];
		}
		QuickSort(numbers, 0, count - 1);
		binary_search(numbers, count, target);
		delete[] numbers;
	}
	return 0;
}