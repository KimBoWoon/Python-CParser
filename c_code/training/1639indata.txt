

#include <stdio.h>
#include <stdlib.h>

typedef struct point {
	int x, y, index;
} Point;

int compare(const void *a, const void *b) {
	Point one, two;
	one = *(Point*) a;
	two = *(Point*) b;

	if (one.x == two.x) {
		if (one.y < two.y)
			return -1;
		if (one.y == two.y)
			return 0;
		return 1;

	} else {
		if (one.x < two.x)
			return -1;
		if (one.x == two.x)
			return 0;
		return 1;
	}
}

int compareI(const void *a, const void *b) {
	Point one, two;
	one = *(Point*) a;
	two = *(Point*) b;

	if (one.index < two.index)
		return -1;
	if (one.index == two.index)
		return 0;
	return 1;
}

int main(void) {
	FILE *input;
	int no_cases, no_points, no_result;
	int i, j, k, si, order, y;
	Point points[100000];

	input = fopen("input.txt", "r");
	if (input == NULL)
		exit(1);
	fscanf(input, "%d", &no_cases);

	for (i = 0; i < no_cases; i++) {

		si = 0;
		order = 1;

		fscanf(input, "%d", &no_points);
		for (j = 0; j < no_points; j++) {
			fscanf(input, "%d %d", &points[j].x, &points[j].y);
		}

		qsort((void *) points, no_points, sizeof(Point), compare);

		for (j = 0; j < no_points; j++) {
			if (points[j].x != points[j + 1].x
					|| ((j == no_points - 1) && (si == 0))) {
				if (si == 0) {
					if (points[0].y != 0) {
						for (k = j; k >= si; k--) {
							points[k].index = order++;
							y = points[si].y;
						}

					} else {
						for (k = si; k <= j; k++) {
							points[k].index = order++;
							y = points[j].y;
						}
					}
				} else {
					if (points[si].y != y) {
						for (k = j; k >= si; k--) {
							points[k].index = order++;
							y = points[si].y;
						}
					} else {
						for (k = si; k <= j; k++) {
							points[k].index = order++;
							y = points[j].y;
						}
					}
				}
				si = j + 1;
			}
		}

		qsort((void *) points, no_points, sizeof(Point), compareI);

		for (j = 0; j < no_points; j++) {
		}

		fscanf(input, "%d", &no_result);
		for (j = 0; j < no_result; j++) {
			fscanf(input, "%d", &k);
			printf("%d %d\n", points[k - 1].x, points[k - 1].y);
		}

	}

	fclose(input);
	return 0;
}