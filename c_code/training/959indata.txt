

#include <iostream>
#include <fstream>
using namespace std;
void drivingLicense(int M, int N, int L, int G, int width[100][100], int height[100][100]);
int main()
{
	int testCase, M, N, L, G;
	int width[100][100], height[100][100];
	ifstream inFile("input.txt");
	if (inFile.fail()){
		return 0;
	}
	inFile >> testCase;
	for (int i = 0; i < testCase; i++){
		inFile >> M >> N >> L >> G;
		for (int y = 0; y < M; y++){
			for (int x = 0; x < N-1; x++){
				inFile >> width[y][x];
			}
		}

		for (int y = 0; y < M-1; y++){
			for (int x = 0; x < N; x++){
				inFile >> height[y][x];
			}
		}

		drivingLicense(M, N, L, G, width, height);
	}
}
void drivingLicense(int M, int N, int L, int G, int width[100][100], int height[100][100]){

	static int Case[100][100][2][200]; 
	int maximumTurn = 0; 
	if (M > N){
		maximumTurn = 2 * (N - 1);
	}
	else if (M < N){
		maximumTurn = 2 * (M - 1);
	}
	else if (M == N){
		maximumTurn = 2 * (M - 1) - 1;
	}
	for (int y = 0; y < M; y++){
		for (int x = 0; x < N; x++) {
			for (int direc = 0; direc < 2; direc++){
				for (int turn = 0; turn <= maximumTurn; turn++) {
					Case[y][x][direc][turn] = G + 1;
				}
			}
		}
	}
	Case[0][0][0][0] = Case[0][0][1][0] = 0;
	int turnCount = 0;
	int flag = 0; 
	for (int y = 0; y < M; y++){
		if (flag == 1)break; 
		for (int x = 0; x < N; x++){
			if (flag == 1)break; 
			for (int turn = 0; turn <= maximumTurn; turn++){
				if (flag == 1)break; 
				for (int direc = 0; direc < 2; direc++){
					if (Case[y][x][direc][turn] <= G){
						if (y == M-1 && x == N-1){ 
								turnCount = turn;	
								flag = 1;
								break;
							}
						}
						if (turn < maximumTurn  && Case[y][x][!direc][turn + 1] > Case[y][x][direc][turn])
							Case[y][x][!direc][turn + 1] = Case[y][x][direc][turn];
						if (direc == 1){
							if (x < N-1 && Case[y][x + 1][direc][turn] > Case[y][x][direc][turn] + width[y][x])
								Case[y][x + 1][direc][turn] = Case[y][x][direc][turn] + width[y][x];
						}
						else{ 
							if (y < M-1 && Case[y + 1][x][direc][turn] > Case[y][x][direc][turn] + height[y][x])
								Case[y + 1][x][direc][turn] = Case[y][x][direc][turn] + height[y][x];
						}
					}
				}
			}
		}
	if (turnCount>0) cout << ("%d\n", (N + M - 2)*L + turnCount) << endl;
	else cout << -1 << endl;

}