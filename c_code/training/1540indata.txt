
#include<iostream>
#include<cmath>
#include<fstream>
#include<cstdlib>
#include<cstring>

using namespace std;
#define MARK 1
#define UNMARK 0

typedef struct Point {
	int x;
	int y;
}point;

point direction[8] = { { 1, -2 },{ 2, -1 },{ 2, 1 },{ 1, 2 },
{ -1, 2 },{ -2, 1 },{ -2, -1 },{ -1, -2 } };

int OMRcard[9][9];
int path[9][9];

int knightTour(int m, int n, point pos, int path_count) {
	
	point next;

	if (path_count == (m*n))
		return 1;

	for (int i = 0; i < 8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;
		if (next.x > 0 && next.x <= n &&
			next.y > 0 && next.y <= m &&
			OMRcard[next.y][next.x] != MARK)
		{
			OMRcard[next.y][next.x] = MARK;
			path[next.y][next.x] = path_count + 1;
			if(knightTour(m, n, next, path_count + 1))
				return 1;						
			OMRcard[next.y][next.x] = UNMARK;  
		}
	}
	return 0;
}


int main()
{
	int testCase, m, n;
	fstream instream("input.txt", ios::in);
	instream >> testCase;
	for (int q = 0; q < testCase; q++)
	{
		point start;
		int path_count;
		instream >> m >> n;
		instream >> start.y >> start.x;

		for (int i = 1; i <=m; i++)
			for (int j = 1; j <=n; j++)
				OMRcard[i][j] = UNMARK;

		OMRcard[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1)) {
			cout << 1 << endl;
			for (int i = 1; i <= m; i++) {
				for (int j = 1; j <= n; j++) {
					cout << path[i][j] << " ";
				}cout << endl;
			}
		}
		else
			cout << 0 << endl;
			
	}
	return 0;
}
