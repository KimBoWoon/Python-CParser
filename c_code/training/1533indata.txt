
#include <iostream>
#include <cstdlib>
#include <fstream>

using namespace std;

const int MAX_SIZE = 9;
const int MAX = 81;
const int MAX_ARR1 = 10;

static int direction[8][2] = {{-2, 1}, {-1, 2}, {1, 2}, {2, 1},
    {2, -1}, {1, -2}, {-1, -2}, {-2, -1}};

bool isValidMove (int row, int col, int sizeRow, int sizeCol, int board[MAX_SIZE][MAX_SIZE]);

int main()
{
    ifstream inStream;
    int numTestCases;
    int board[MAX_SIZE][MAX_SIZE];
    inStream.open("input.txt");
    if (inStream.fail())
    {
        cerr << "Input file opening failed.\n";
        exit(1);
    }
    inStream >> numTestCases;
    for(int i=0; i<numTestCases; i++)
    {
        int sizeRow = 0, sizeCol = 0;
        int startRow = 0, startCol = 0;
        int nextRow = 0, nextCol = 0;
        int row = 0, col = 0;
        int arr1[MAX][MAX_ARR1];
        int p = 0,  find = 0, q = 0;
        int no = 0;
        
        
        
        inStream >> sizeRow >> sizeCol;
        inStream >> startRow >> startCol;
        
        for (int j = 0; j < MAX_SIZE; j++)
            for (int k = 0; k < MAX_SIZE; k++)
                board[j][k] = 0;
        for (int j = 0; j < MAX; j++)
            for (int k = 0; k < MAX_ARR1; k++)
                arr1[j][k] = 0;
        
        
        row = startRow-1;
        col = startCol-1;
        
        arr1[0][0] = row;
        arr1[0][1] = col;
        
        board[row][col] = 1;
        
        for (p = 2; p <= sizeRow*sizeCol; p++)
        {
            find = 0;
            
            for(int dir=0; dir<8; dir++)
            {
                nextRow = row + direction[dir][0];
                nextCol = col + direction[dir][1];
                
                if (arr1[q][dir+2] == 1)
                    continue;
                
                if(isValidMove(nextRow, nextCol, sizeRow, sizeCol, board))
                {
                    arr1[q][dir+2] = 1;
                    arr1[++q][0] = nextRow;
                    arr1[q][1] = nextCol;
                    board[nextRow][nextCol] = p;
                    row = nextRow;
                    col = nextCol;
                    find = 1;
                    break;
                }
            }
            
            
            if (find == 0)
            {
                p-=2;
                
                for (int z = 2; z < MAX_ARR1; z++)
                    arr1[q][z] = 0;
                board[row][col] = 0;
                arr1[q][0] = 0;
                arr1[q--][1] = 0;
                row = arr1[q][0];
                col = arr1[q][1];
            }
            
            if (p < 1){
                no = 1;
                cout << 0 << endl;
                break;
            }
        }
        
        if (no == 0)
        {
            cout << 1 << endl;
            
            for (int a = 0; a < sizeRow; a++)
            {
                for (int b = 0; b < sizeCol; b++)
                    cout << board[a][b] << " ";
                cout << endl;
            }
        }
    }
    inStream.close();
    return 0;
}

bool isValidMove (int row, int col, int sizeRow, int sizeCol, int board[MAX_SIZE][MAX_SIZE])
{
    if(row>=sizeRow || row<0)
        return false;
    if(col>=sizeCol || col<0)
        return false;
    if(board[row][col] != 0)
        return false;
    else
        return true;
}