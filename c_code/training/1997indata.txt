
#include <iostream>
#include <fstream>


struct result{
	int diff;
	int count;
};

typedef struct result Result;
void swap(int arr[], int a, int b);
int Partition(int *arr, int left, int right);
void QuickSort(int *arr, int left, int right);
void binary_search(int* numbers, int count, const int target);

int main(void){

	std::ifstream inFile("input.txt");
	if (inFile.fail()){
		std::cout << "not file" << std::endl;
	}

	int testCases = 0;
	inFile >> testCases;

	for (int i = 0; i < testCases; i++){

		int count = 0;
		int target = 0;
		int *numbers = NULL;

		inFile >> count >> target;

		numbers = new int[count];
		for (int i = 0; i < count; i++){
			inFile >> numbers[i];
		}
		QuickSort(numbers, 0, count - 1);
		binary_search(numbers, count, target);
		delete[] numbers;
	}
	return 0;
}

void swap(int arr[], int a, int b)
{
	int temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
}

int Partition(int *arr, int left, int right)
{
	int pivot = arr[left];
	int bottom = left + 1;
	int top = right;

	while (bottom <= top)
	{
		while (pivot>arr[bottom])
			bottom++;
		while (pivot<arr[top])
			top--;
		if (bottom <= top)
			swap(arr, bottom, top);
	}
	swap(arr, left, top);
	return top;
}

void QuickSort(int *arr, int left, int right)
{
	if (left <= right)
	{
		int pivot = Partition(arr, left, right);
		QuickSort(arr, left, pivot - 1);
		QuickSort(arr, pivot + 1, right);
	}
}

void binary_search(int* numbers, int count, const int target){

	int left = 0;
	int right = count - 1;
	int diff = 0;
	int abs_diff = 0;
	Result result = { 9999999999999999, 0 };

	while (1){
		if (right <= left){
			break;
		}
		diff = target - (numbers[left] + numbers[right]);
		diff = diff > 0 ? diff : diff * -1;
		if (result.diff > diff){
			result.diff = diff;
			result.count = 1;
		}
		else if (result.diff < diff){

		}
		else{
			result.count++;
		}
		if ((numbers[left] + numbers[right]) > target){
			right--;
		}
		else{
			left++;
		}
	}
	std::cout << result.count << std::endl;
}