

#include <stdio.h>
#include <stdlib.h>
#define MAX 100

void sortArray(int *data, int size, int value);
void checkRoom(char input[MAX][MAX], int row, int col);
void countRoom(char input[MAX][MAX], int row, int col, int rooms);
void floodFill(char input[MAX][MAX], int x, int y, char oldColor, char newColor);
void freeInt(int *arr);

void main() {
	int row, col;
	int numTestCase;
	int i, j, k;
	FILE *f;
	f = fopen("input.txt", "r");
	fscanf(f, "%d", &numTestCase);
	for (i = 0; i < numTestCase; i++) {
		char room[MAX][MAX] = {0};
		fscanf(f, "%d %d", &row, &col);
		for (j = 0; j < col; j++) 
			fscanf(f, "%s", room[j]);
		checkRoom(room, row, col);
	}
	
}

void sortArray(int *data, int size, int value) {	
	if (size == 0)
		data[size] = value;
	else {
		if (data[size - 1] > value)
			data[size] = value;
		else {
			data[size] = data[size - 1];
			sortArray(data, size - 1, value);
		}
	}
}

void checkRoom(char input[MAX][MAX], int row, int col) {	
	int count = 0;
	int i, j;

	for (i = 0; i < col; i++) {
		for (j = 0; j < row; j++) {
			if (input[i][j] == '.') {
				count++;
				floodFill(input, i, j, '.', count + 48);
			}
		}
	}
	countRoom(input, row, col, count);
}

void countRoom(char input[MAX][MAX], int row, int col, int rooms) {	
	int count = 0;
	int i = 0;
	int j, k;
	int *room = (int *)malloc(sizeof(int)*rooms);	
	for (i = 0; i < rooms; i++) {
		for (j = 0; j < col; j++) {
			for (k = 0; k < row; k++) {
				if (input[j][k] == i + 49)
					count++;
			}
		}
		sortArray(room, i, count);
		count = 0;
	}
	printf("%d\n", rooms);
	for (i = 0; i < rooms; i++)
		printf("%d ", *(room + i));
	printf("\n");

	freeInt(room);	
}

void floodFill(char input[MAX][MAX], int x, int y, char oldColor, char newColor) {	
	if (input[x][y] != oldColor)
		return;
	else {
		input[x][y] = newColor;

		floodFill(input, x - 1, y, oldColor, newColor);
		floodFill(input, x + 1, y, oldColor, newColor);
		floodFill(input, x, y - 1, oldColor, newColor);
		floodFill(input, x, y + 1, oldColor, newColor);
	}
}

void freeInt(int *arr) {
	if (arr != NULL)
		free(arr);
}