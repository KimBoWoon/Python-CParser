#include <stdio.h>

int HORI[101][101], VERT[101][101];
int GRID[101][101][2][201];

int countTurn(int m, int n, int l, int g);

int main()
{
	int testCases = 0;
	int m = 0, n = 0, l = 0, g = 0;
	int a = 0 , b = 0, c = 0, d = 0;
	int turn = 0;

	FILE* fp = fopen("input.txt", "r");

	if (fp == NULL)
	{
		printf("file error\n");
	}

	fscanf(fp, "%d", &testCases);

	while (testCases--) 
	{
		fscanf(fp, "%d %d %d %d", &n, &m, &l, &g);

		for (a = 1; a <= n; a++) 
		{
			for (b = 1; b < m; b++) 
			{
				fscanf(fp, "%d", (HORI[a] + b));
			}	
		}
			
		for (a = 1; a < n; a++) 
		{
			for (b = 1; b <= m; b++) 
			{
				fscanf(fp, "%d", (VERT[a] + b));
			}
		}
			
		for (a = 1; a <= n; a++) 
		{
			for (b = 1; b <= m; b++) 
			{
				for (c = 0; c < 2; c++) 
				{
					for (d = 0; d < 201; d++)
					{
						GRID[a][b][c][d] = g + 1;
					}
				}	
			}	
		}
			
		GRID[1][1][0][0] = GRID[1][1][1][0] = 0;
		turn = countTurn(m, n, l, g);

		if (turn < 200) 
		{
			printf("%d\n", (m + n - 2) * l + turn);
		}
		else
		{
			printf("-1\n");
		}
	}

	fclose(fp);
	return 0;
}

int countTurn(int m, int n, int l, int g)
{
	int a = 0, b = 0, c = 0, d = 0;
	int turn = 200; 

	for (a = 1; a <= n; a++) 
	{
		for (b = 1; b <= m; b++) 
		{
			for (d = 0; d <= 200; d++) 
			{
				for (c = 0; c < 2; c++) 
				{
					if (GRID[a][b][c][d] <= g)
					{
						if (a == n && b == m)
						{
							turn > d ? turn = d : turn;
						}
						if ((d < 200) && 
							(GRID[a][b][!c][d + 1] > GRID[a][b][c][d])) 
						{
							GRID[a][b][!c][d + 1] = GRID[a][b][c][d];
						}	
						if (c) 
						{
							if ((b < m) && 
								(GRID[a][b + 1][c][d] > 
								(GRID[a][b][c][d] + HORI[a][b])))
							{
								GRID[a][b + 1][c][d] 
									= GRID[a][b][c][d] + HORI[a][b];
							}
								
						}
						else
						{
							if ((a < n) &&
								(GRID[a + 1][b][c][d] >
								(GRID[a][b][c][d] + VERT[a][b]))) 
							{
								GRID[a + 1][b][c][d] 
									= GRID[a][b][c][d] + VERT[a][b];
							}
						}
					}
				}
			}
		}
	}			
	return turn;
}