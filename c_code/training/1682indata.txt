
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

typedef struct Point {
	int x;
	int y;
} point;

point p[100005];

int compare(const void *a, const void *b);	
int compare_up(const void *a, const void *b);	
int compare_down(const void *a, const void *b);	

int main() {
	FILE* file;
	int numcases, num, m, m_arry[10];
	int i, j, count, up_down;

	file = fopen("input.txt", "r");

	fscanf(file, "%d", &numcases);

	while (numcases--) {

		fscanf(file, "%d", &num);
		for (i = 0; i < num; i++) fscanf(file, "%d %d", &p[i].x, &p[i].y);

		fscanf(file, "%d", &m);
		for (i = 0; i < m; i++) fscanf(file, "%d", &m_arry[i]);

		qsort(&p[0], num, sizeof(point), compare);	
				
		i = 0;
		if (p[i].x == p[i+1].x) {
			while (p[i].y != 0) i++;
			
			point tmp = p[0];
			p[0] = p[i];
			p[i] = tmp;			
		}

	

		for (i = 0; i < num - 2; i++) {
			if (p[i + 1].x == p[i + 2].x) {
				j = i + 1; count = 1;
				while (p[j].x == p[j + 1].x && j + 1 < num) {
					j++; count++;
				}
				if (p[i].y - p[i + 1].y == 0) { if (p[i].y - p[i + 2].y) up_down = p[i].y - p[i + 2].y; }
				else up_down = p[i].y - p[i + 1].y;

				if (up_down < 0) qsort(&p[i + 1], count, sizeof(point), compare_up);
				else qsort(&p[i + 1], count, sizeof(point), compare_down);

				i += count - 1;
			}
		}
		for (i = 0; i < m; i++)
			printf("%d %d\n", p[m_arry[i] - 1].x, p[m_arry[i] - 1].y);
	}
	return 0;
}

int compare(const void *a, const void *b) {

	int n1, n2;
	n1 = ((point*)a)->x;
	n2 = ((point*)b)->x;
	
	if (n1 > n2) return 1;
	else if (n1 < n2) return -1;
	else return 0;
}

int compare_up(const void *a, const void *b) {

	int n1, n2;
	n1 = ((point*)a)->y;
	n2 = ((point*)b)->y;
	
	if (n1 > n2) return 1;
	else if (n1 < n2) return -1;
	else return 0;
}

int compare_down(const void *a, const void *b) {

	int n1, n2;
	n1 = ((point*)a)->y;
	n2 = ((point*)b)->y;

	if (n1 > n2) return -1;
	else if (n1 < n2) return 1;
	else return 0;
}
