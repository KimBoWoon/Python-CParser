
#include <iostream>
#include <fstream>
#define MAXSIZE 9
#define MARK 1
#define UNMARK 0

using namespace std;

typedef struct pos{
   int x;
   int y;
}Point;
Point direction[8] = {{1, -2}, {2, -1}, {2, 1}, {1, 2},
{-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}};

int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];
void printTour(int row, int col);
int knightTour(int m, int n, Point current, int counter);

int main(){
   ifstream infile;
   infile.open("input.txt");

   int testCase;
   infile>>testCase;

   for(int a=0; a<testCase; a++){
      int m,n;
      infile>>m>>n;

      Point start;
      infile>>start.x>>start.y;

      for(int i=1; i<=m; i++){
         for(int j=1; j<=n; j++){
            board[i][j] = UNMARK;
         }
      }

      board[start.x][start.y] = MARK;
      path[start.x][start.y] = 1;

      if( knightTour(m, n, start, 1) )
      {
         cout<<"1"<<endl;
		 printTour(m, n);
      }
      else
         cout<<"0"<<endl;

   }
   infile.close();
   return 0;
}
int knightTour(int row, int col, Point pos, int counter) {
	int i;
	Point next;

	if (counter == row * col)
		return 1;

	for (i = 0; i < 8; i++) {
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if (next.x > 0 && next.x <= row && next.y > 0 && next.y <= col && board[next.x][next.y] != MARK) {
			board[next.x][next.y] = MARK;
			path[next.x][next.y] = counter + 1;
			if (knightTour(row, col, next, counter + 1))
				return 1;
			board[next.x][next.y] = UNMARK;
		}
	}
	return 0;
}

void printTour(int row ,int col){
	int i, j;

	for (i = 1; i <= row; i++) {
		for (j = 1; j <= col; j++) {
			cout << path[i][j]<< " ";
		}
		cout << endl;
	}

}