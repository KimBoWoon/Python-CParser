
#include <iostream>
#include <fstream>

#define MAXSIZE 9

#define MARK 1
#define UNMARK 0

typedef struct Point { int x, y; } point;


point direction[8] = { { 1, -2 },{ 2, -1 },{ 2, 1 },{ 1, 2 },
{ -1, 2 },{ -2, 1 },{ -2, -1 },{ -1, -2 } };

int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];

void printTour(int m, int n) {
	std::cout << 1 << std::endl;
	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) {
			std::cout << path[i][j] << " ";
		}
		std::cout << std::endl;
	}
}

int knightTour(int m, int n, point pos, int counter) {

	int i;

	point next;

	if (counter == m * n) return 1;

	for (i = 0; i < 8; i++) {

		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if (next.x > 0 && next.x <= n &&
			next.y > 0 && next.y <= m &&
			board[next.y][next.x] != MARK) {
			board[next.y][next.x] = MARK;

			path[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter + 1)) return 1;

			board[next.y][next.x] = UNMARK;
		}
	}
	return 0;
}

int main() {
	std::ifstream fin;

	fin.open("input.txt");
	int numcase;
	if (fin.is_open() == false)  return -1;

	fin >> numcase;
	while (numcase--) {
		int i, j, m, n;
		point start;
		fin >> m; fin >> n;
		fin >> start.y; fin >> start.x;

		for (i = 1; i <= m; i++)
			for (j = 1; j <= n; j++)
				board[i][j] = UNMARK;

		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1)) printTour(m, n);
		else std::cout << 0 << std::endl;
	}
	fin.close();
}