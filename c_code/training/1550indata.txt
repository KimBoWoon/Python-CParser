

#include<iostream>
#include<fstream>
using namespace std;

#define MAXSIZE 8
#define MARK 1
#define UNMARK 0

int board[MAXSIZE][MAXSIZE] = { 0 }, path[MAXSIZE][MAXSIZE] = { 0 };
typedef struct Point { int x, y; } point;
point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 },
{ -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } };
int knightTour(int m, int n, point pos, int counter);

int main()
{
	int testCase = 0;
	Point start;
	ifstream file("input.txt");
	file >> testCase;

	int m, n;
	for (int i = 0; i < testCase; i++)
	{
		file >> m >> n;
		file >> start.y >> start.x;

		for (int j = 1; j <= m; j++){
			for (int k = 1; k <= n; k++)
				board[j][k] = UNMARK;
		}

		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1))
		{
			cout << "1" << endl;
			for (int j = 1; j <= m; j++){
				for (int k = 1; k <= n; k++)
					cout << path[j][k]<<" ";
				cout << endl;
			}
		}
		else
			cout << "0" << endl;
	}
}

int knightTour(int m, int n, point pos, int counter)
{
	point next;

	if (counter == m*n)
		return 1;

	for (int i = 0; i < 8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if ((next.x > 0) && (next.x <= n) && (next.y > 0) && (next.y <= m) && (board[next.y][next.x] != MARK))
		{
			board[next.y][next.x] = MARK;
			path[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter + 1))
				return 1;

			board[next.y][next.x] = UNMARK;
		}
	}

	return 0;
}