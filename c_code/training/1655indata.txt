
#include <stdio.h>
#include <stdlib.h>
#define MAX 100000

typedef struct Point {
	int x;
	int y;
}point;
point p[MAX];

int sortXY(const void *a, const void *b);
int sortY(const void *a, const void *b);
void monotoneWalk(int i,int cafeNum);
void print(int i, FILE *in);

int main(){

	FILE *in = fopen("input.txt", "r");
	int no_Cases; 
	fscanf(in, "%d", &no_Cases);

	while(no_Cases--)
	{
		int i;
		int cafeNum;
		int count = 1;

		fscanf(in, "%d", &cafeNum); 
		for (i = 0; i<cafeNum; i++) 
			fscanf(in, "%d %d", &p[i].x, &p[i].y);
		qsort(p, cafeNum, sizeof(p[0]), sortXY); 
		for (i = 0; i<cafeNum - 1; i++) 
			monotoneWalk(i,cafeNum);
		print(i, in);
	}
	fclose(in);
	return 0;
}

int sortXY(const void *a, const void *b) {
	point *pA = (point *)a;
	point *pB = (point *)b;

	if (pA->x < pB->x)      return -1; 
	else if (pA->x > pB->x) return 1;
	else if (pA->y < pB->y) return -1; 
	else if (pA->y > pB->y) return 1;
	else                    return 0;  
}

int sortY(const void *a, const void *b) {
	point *pA = (point *)a;
	point *pB = (point *)b;
	if (pA->y < pB->y)      return 1;
	else if (pA->y > pB->y) return -1;
	else                    return 0;
}

void monotoneWalk(int i,int cafeNum)
{
	int j, count=1;

	if (p[0].y != 0) 
	{
		for (j = i; j<cafeNum - 1; j++)
		{
			if (p[j].x == p[j+1].x)
				count++;
			else
				break;
		}
		qsort(&p[i], count, sizeof(p[0]),  sortY);
		i=j;
		count=1;
	}
	else if ( (p[i].x != p[i+1].x 
		    && p[i].y != p[i+1].y) ) 
	{
		for (j=i+1; j<cafeNum; j++) 
		{
			if (p[j].x==p[j+1].x)
				count++;
			else
				break;
		}
		qsort(&p[i+1], count, sizeof(p[0]), sortY);
		i=j;
		count=1;
	}
}

void print(int i, FILE *in)
{
	int M_num;
	fscanf(in, "%d", &M_num);
	for (i = 0; i<M_num; i++) 
	{
		int j;
		fscanf(in, "%d", &j);
		printf("%d %d\n", p[j-1].x, p[j-1].y);
	}
}