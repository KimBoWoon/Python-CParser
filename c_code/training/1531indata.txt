#include<stdio.h>
#include<stdlib.h>

#define visit 1
#define no_visit 0

typedef struct Point 
{
	int x, y;
} point;

point direction[8] = {{1, -2}, {2, -1}, {2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}};
int chess_visit[9][9] = {0,};  
int chess_order[9][9] = {0,};  

int knightTour (int m, int n, point pos, int counter)
{
	int i;
	point next;

	if (counter == (m * n))				
		return 1;

	for (i=0; i<8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if ((next.x >= 1) && (next.x <= n) && (next.y >= 1) && (next.y <= m) && (chess_visit[next.y][next.x] != visit))
		{
			chess_visit[next.y][next.x] = visit;
			chess_order[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter+1))	
				return 1;
			chess_visit[next.y][next.x] = no_visit; 
		}
	}
	return 0;							
}
int main()
{
	int numcase;
	int i, j, m, n;
	int p, q;

	FILE * in_file;
	in_file = fopen("input.txt", "r");

	fscanf(in_file, "%d", &numcase);
	while(numcase--)
	{
		point start;
		fscanf(in_file, "%d %d", &m, &n);
		fscanf(in_file, "%d %d", &start.y, &start.x);

		for (i=1; i<=m; i++)
		{
			for (j=1; j<=n; j++)
			{
				chess_visit[i][j] = no_visit;
			}
		}
		chess_visit[start.y][start.x] = visit;	
		chess_order[start.y][start.x] = 1;		
		if (knightTour(m, n, start, 1))
		{
			printf("1\n");						
			for(p=1; p<=m; p++)
			{
				for(q=1; q<=n; q++)
				{
					printf("%2d ", chess_order[p][q]);
				}
				printf("\n");
			}
		}
		else
			printf("0\n");						
	}
	fclose(in_file);
}