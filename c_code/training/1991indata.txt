

#include <iostream>
#include <fstream>

using namespace std;
void swap(int arr[], int a, int b);
int Partition(int *arr, int left, int right);
void QuickSort(int *arr, int left, int right);
int main(){

	ifstream inFile;
	inFile.open("input.txt");
	int no_cases = 0;
	inFile >> no_cases;
	for (int test = 0; test < no_cases; test++){
	
		int num = 0, target = 0;
		inFile >> num >> target;
		int p = num - 1, j = 1, min = 0, cnt = 1;
		int *arr = new int[num];
		for (int i = 0; i < num; i++)
			inFile >> arr[i];
		QuickSort(arr, 0, num - 1); 

		min = (arr[0] + arr[num - 1]);
		if (min >= target)
			min = min - target;
		else
			min = target - min;
		
		while (j != p){
			num = (arr[j] + arr[p]);
			if (num >= target)
				num = num - target;
			else
				num = target - num;
			
			if (min>num){
				min = num;
				cnt = 0;
				cnt++;
			}
			else if (min == num)
				cnt++;	
			if ((arr[j] + arr[p])>target)
				p--;
			else
				j++;
			
		}
		cout << cnt << endl;
		delete arr;
	}
	return 0;
}
void swap(int arr[], int a, int b)
{
	int temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
}

int Partition(int *arr, int left, int right)
{
	int pivot = arr[left];
	int bottom = left + 1;
	int top = right;

	while (bottom <= top)
	{
		while (pivot>arr[bottom])
			bottom++;
		while (pivot<arr[top])
			top--;
		if (bottom <= top)
			swap(arr, bottom, top);
	}
	swap(arr, left, top);
	return top;
}
void QuickSort(int *arr, int left, int right)
{
	if (left <= right)
	{
		int pivot = Partition(arr, left, right);
		QuickSort(arr, left, pivot - 1);
		QuickSort(arr, pivot + 1, right);
	}
}









