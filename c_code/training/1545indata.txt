
#include<iostream>
#include<fstream>
using namespace std;

#define MAXSIZE 20
#define MARK 1
#define UNMARK 0
typedef struct Point { int x, y; } point;
point direction[8] = { { -2, -1 }, { -2, 1 }, { -1, -2 }, { -1, 2 }, { 1, -2 }, { 1, 2 }, { 2, -1 }, { 2, 1 } };
int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];
int knightTour(int m, int n, point pos, int counter){
	int i;
	point next;
	if (counter == m * n)
		return 1;
	for (i = 0; i<8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;
		if (next.x > 0 && next.x <= m && next.y > 0 && next.y <= n && board[next.x][next.y] != MARK)
		{
			board[next.x][next.y] = MARK;
			path[next.x][next.y] = counter + 1;
			if (knightTour(m, n, next, counter + 1))
				return 1;
			board[next.x][next.y] = UNMARK;
		}
	}
	return 0;
}
void printTour(int m, int n,int path[MAXSIZE][MAXSIZE]){
	for (int i = 1; i <= m; i++){
		for (int j = 1; j <= n; j++)
			cout << path[i][j] << " ";
		cout << endl;
	}
}
int main()
{
	int i, j, m, n,k,cnt;
	point start;
	ifstream in;
	in.open("input.txt");
	in >> cnt;
	for (k = 0; k < cnt; k++){
		in >> m >> n >> start.x >> start.y;
		for (i = 1; i <= m; i++){
			for (j = 1; j <= n; j++)
				board[i][j] = UNMARK;
		}
		board[start.x][start.y] = MARK;
		path[start.x][start.y] = 1;
		if (knightTour(m, n, start, 1)){
			cout << "1" << endl;
			printTour(m, n, path);
		}
		else
			cout << "0" << endl;
	}
	return 0;
}