#include <iostream>
#include <fstream>

int gcd(unsigned int a, int b)
{
	if (b == 0)
		return a;
	else
		return gcd(b, a % b);
}

class Fraction
{
private:
	int denominator;
	int numerator;
public:
	Fraction(const int& n, const int& d) :
			denominator(d), numerator(n)
	{
	}
	friend Fraction operator+(const Fraction& a, const Fraction& b);
	friend Fraction operator-(const Fraction& a, const Fraction& b);
	friend std::ostream& operator<<(std::ostream& os, const Fraction& a);
	bool operator <= (const Fraction& c)
	{
		return numerator * c.denominator <= denominator * c.numerator;
	}
	int getHenry()
	{
		int x = 2;
		Fraction copy = *this;
		for (; copy.numerator != 1; x++)
		{
			Fraction b(1, x);
			if (b <= copy)
			{
				copy = copy - b;
			}
		}
		return copy.denominator ;
	}
};

std::ostream& operator<<(std::ostream& os, const Fraction& a)
{
	os << a.numerator << " " << a.denominator;
	return os;
}

Fraction operator+(const Fraction& a, const Fraction& b)
{
	int denominator = a.denominator * b.denominator;
	int numerator = a.denominator * b.numerator + a.numerator * b.denominator;
	int g = gcd(denominator, numerator);
	denominator /= g;
	numerator /= g;
	Fraction c(numerator, denominator);
	return c;
}
Fraction operator-(const Fraction& a, const Fraction& b)
{
	int denominator = a.denominator * b.denominator;
	int numerator = a.numerator * b.denominator - a.denominator * b.numerator;
	int g = gcd(denominator, numerator);
	denominator /= g;
	numerator /= g;
	Fraction c(numerator, denominator);
	return c;
}


int main()
{
	std::ifstream input;
	input.open("input.txt");
	if (input.fail())
	{
		std::cerr << "file open err" ;
		return 1;
	}

	int caseNum;
	input >> caseNum;
	for (int i = 0; i < caseNum; i++)
	{
		int n, d;
		input >> n >> d;
		Fraction h(n, d);
		std::cout << h.getHenry() << std::endl;
	}

	return 0;
}