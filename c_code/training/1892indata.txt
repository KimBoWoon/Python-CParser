

#include<iostream>
#include<fstream>
#include<cmath>
#include<cstdlib>
using namespace std;

struct Team{
	int win, lose;
	double expect;
};

int cmp(const void* a, const void* b){
	Team* ta = (Team*)a;
	Team* tb = (Team*)b;
	if (ta->expect < tb->expect)
		return 1;
	else if (ta->expect > tb->expect)
		return -1;
	else if (ta->expect == tb->expect)
		return 0;
}

int main(){
	ifstream File;
	int numCase = 0;
	int teamNum = 0, playNum = 0;

	File.open("input.txt");
	File >> numCase;
	for (int iter = 0; iter < numCase; iter++){
		File >> teamNum >> playNum;
		Team* t = new Team[teamNum];
		for (int i = 0; i < teamNum; ++i){
			t[i].expect = t[i].lose = t[i].win = 0;
		}

		int t1, t2, s1, s2;
		for (int i = 0; i < playNum; ++i){
			File >> t1 >> t2 >> s1 >> s2;
			t1--;
			t2--;
			t[t1].lose += s2;
			t[t1].win += s1;
			t[t2].win += s2;
			t[t2].lose += s1;
		}

		for (int i = 0; i < teamNum; ++i){
			if (t[i].win != 0 || t[i].lose != 0){
				double ss = pow(t[i].win, 2);
				double aa = pow(t[i].lose, 2);
				t[i].expect = ss / (ss + aa);
			}
			else
				t[i].expect = 0;
		}

		qsort(t, teamNum, sizeof(Team), cmp);
		int max = t[0].expect * 1000;
		int min = t[teamNum-1].expect * 1000;

		cout << max << endl;
		cout << min << endl;

		delete[] t;
	}
	File.close();
	return 0;
}