#include<stdio.h>
#include<stdlib.h>
#include<stdio.h>
#include<malloc.h>

int compareUp(const void *A, const void *B);
int compareDown(const void *A, const void *B);
int compairRevY(const void* A, const void* B);


typedef struct way{
	int x;
	int y;
}Way;

int main()
{
	FILE * in;
	int k, i, j;
	int numtest;
	int n, m, cafeNum;
	in = fopen("input.txt", "r");

	fscanf(in, "%d", &numtest);

	for (k = 0; k < numtest; k++)
	{
		Way* wayArray;
		int check = 0, count = 1;
		int t = 0, plagNum = 0, sum = 0;
		int* countNum;
		int startReverse = 1;
		fscanf(in, "%d", &n);
		wayArray = (Way*)malloc(sizeof(Way)*n);

		for (i = 0; i < n; i++)
		{
			fscanf(in, "%d %d", &wayArray[i].x, &wayArray[i].y);
		}

		if (n > 1){
			if (wayArray[1].x == 0) {
				if (wayArray[1].y < 0) startReverse = 0;
			}
			else startReverse = 1;
		}
		if (startReverse == 1) qsort(wayArray, n, sizeof(Way), compareUp);
		else qsort(wayArray, n, sizeof(Way), compareDown);

		if (n >= 0)check = wayArray[0].x;

		for (i = 0; i < n; i++)
		{
			if (check == wayArray[i].x) continue;
			else{
				count++;
				check = wayArray[i].x;
			}
		}
		if (count != 0){
			countNum = (int*)malloc(sizeof(int)*(count));

			for (i = 0; i < count; i++)
			{
				countNum[i] = 0;
			}
			check = wayArray[0].x;
		}

		for (i = 0; i < n; i++)
		{
			if (check == wayArray[i].x) countNum[plagNum]++;
			else{
				check = wayArray[i].x;
				plagNum++;
				i--;
			}
		}

		sum = 0;

		if (count >= 2){
			for (i = 0; i < count - 1; i++)
			{
				if (wayArray[sum + countNum[i] - 1].y != wayArray[sum + countNum[i]].y)
				{
					qsort(wayArray + sum + countNum[i], countNum[i + 1], sizeof(struct way), compairRevY);
				}
				sum = sum + countNum[i];
			}
		}

		fscanf(in, "%d", &m);
		for (i = 0; i < m; i++)
		{
			fscanf(in, "%d", &cafeNum);
			printf("%d %d\n", wayArray[cafeNum - 1].x, wayArray[cafeNum - 1].y);
		}
		free(wayArray);
		free(countNum);
	}
}
int compareUp(const void *A, const void *B) 
{
	Way a = *(Way*)A;
	Way b = *(Way*)B;
	if (a.x < b.x) return -1;
	else if (a.x > b.x) return 1;
	else if (a.x == b.x){

		if (a.y < b.y) return -1;
		else if (a.y > b.y) return 1;
	}
}
int compareDown(const void *A, const void *B) 
{
	Way a = *(Way*)A;
	Way b = *(Way*)B;
	if (a.x < b.x) return -1;
	else if (a.x > b.x) return 1;
	else if (a.x == b.x){

		if (a.y > b.y) return -1;
		else if (a.y < b.y) return 1;
	}
}

int compairRevY(const void* A, const void* B){

	Way a = *(Way*)A;
	Way b = *(Way*)B;
	if (a.y < b.y){
		return 1;
	}
	else if (a.y == b.y){
		return 0;
	}
	else return -1;

}
