



#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

int ascendingOrder(const void *A, const void *B);
int descendingOrder(const void *A, const void *B);
int compareArray(const void* A, const void* B);

typedef struct way{
   int x;
   int y;
}Way;

int main()
{
   FILE * inFile;
   int i, j, k;
   int testCases;
   int n, m;
   int cafeNum;

   inFile = fopen("input.txt", "r");

   fscanf(inFile, "%d", &testCases);

   for (n = 0; n < testCases; n++)
   {
      Way* wayArray;
      int check = 0, count = 1;
      int* cafe;
	  int t = 0, turnPoint = 0, sum = 0;
      int startReverse = 1;

      fscanf(inFile, "%d", &k);
      wayArray = (Way*)malloc(sizeof(Way)*k);

      for (i = 0; i < k; i++)
      {
         fscanf(inFile, "%d %d", &wayArray[i].x, &wayArray[i].y);
      }

      if (k > 1)
	  {
         if (wayArray[1].x == 0)
		 {
            if (wayArray[1].y < 0) 
				startReverse = 0;
         }

         else startReverse = 1;
      }

      if (startReverse == 1) qsort(wayArray, k, sizeof(Way), ascendingOrder);
      else qsort(wayArray, k, sizeof(Way), descendingOrder);

      if (k >= 0)check = wayArray[0].x;

      for (i = 0; i < k; i++)
      {
         if (check == wayArray[i].x)
			 continue;

         else
		 {
            count++;
            check = wayArray[i].x;
         }
      }
      if (count != 0){
         cafe = (int*)malloc(sizeof(int)*(count));

         for (i = 0; i < count; i++)
         {
            cafe[i] = 0;
         }
         check = wayArray[0].x;
      }

      for (i = 0; i < k; i++)
      {
         if (check == wayArray[i].x) cafe[turnPoint]++;

         else
		 {
            check = wayArray[i].x;
            turnPoint++;
            i--;
         }
      }

      sum = 0;

      if (count >= 2){
         for (i = 0; i < count - 1; i++)
         {
            if (wayArray[sum + cafe[i] - 1].y != wayArray[sum + cafe[i]].y)
            {
               qsort(wayArray + sum + cafe[i], cafe[i + 1], sizeof(struct way), compareArray);
            }
            sum = sum + cafe[i];
         }
      }

      fscanf(inFile, "%d", &m);
      for (i = 0; i < m; i++)
      {
         fscanf(inFile, "%d", &cafeNum);
         printf("%d %d\n", wayArray[cafeNum - 1].x, wayArray[cafeNum - 1].y);
      }

      free(wayArray);
      free(cafe);
   }
}

int ascendingOrder(const void *A, const void *B) 
{
   Way a = *(Way*)A;
   Way b = *(Way*)B;
   if (a.x < b.x) 
	   return -1;
   else if (a.x > b.x) 
	   return 1;
   else if (a.x == b.x)
   {

      if (a.y < b.y) 
		  return -1;
      else if (a.y > b.y)
		  return 1;
   }
}

int descendingOrder(const void *A, const void *B) 
{
   Way a = *(Way*)A;
   Way b = *(Way*)B;
   if (a.x < b.x) return -1;
   else if (a.x > b.x) return 1;
   else if (a.x == b.x){

      if (a.y > b.y) return -1;
      else if (a.y < b.y) return 1;
   }
}

int compareArray(const void* A, const void* B)
{

   Way a = *(Way*)
	   A;
   Way b = *(Way*)
	   B;

   if (a.y < b.y)
   {
      return 1;
   }

   else if (a.y == b.y)
   {
      return 0;
   }

   else return -1;

}