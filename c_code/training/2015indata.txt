
#include <iostream>
#include <fstream>

#define abs(x) ((x) < 0 ? (-(x)) : (x))

int arr[1000000];
int a, b; 

void swap(int& n1, int& n2) {
	int temp = n1;
	n1 = n2;
	n2 = temp;
}

int division_Sort(int left, int right) {
	int index = left;
	int select = arr[index];
	left++;

	while (left <= right) {
		while (arr[left] <= select && left < right) left++;
		while (arr[right] > select && left <= right) right--;
		if (left < right) swap(arr[left], arr[right]);
		else break;
	}
	swap(arr[index], arr[right]);
	return right;
}

void recursion_QuickSort(int left, int right) {
	if (left < right) {
		int index = division_Sort(left, right);

		recursion_QuickSort(left, index - 1);
		recursion_QuickSort(index + 1, right);
	}	 
}

void twoNumber(int n) {
	int i = 0, j = n - 1;
	int abs_num ,num;
	int count = 1;
	int min = 200000000; 

	while (true) {
		
		num = b - (arr[i] + arr[j]);
		
		if (num >= 0)i++;
		else j--;	
		
		abs_num = abs(num);
		
		if (min > abs_num) {
			min = abs_num;
			count = 1;
		}
		else if (min == abs_num) count++;
		if (i >= j) break;
	}
	std::cout << count << std::endl;
}

int main() {
	std::ifstream fin;

	fin.open("input.txt");
	int numcase; 
	if (fin.is_open() == false)  return -1;

	fin >> numcase;
	while (numcase--) {
		fin >> a >> b;
		for (int i = 0; i < a; i++) {
			fin >> arr[i];
		}
		recursion_QuickSort(0, a - 1);
		twoNumber(a);
	}
	fin.close();
}