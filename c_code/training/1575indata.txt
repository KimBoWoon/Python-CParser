#include<iostream>
#include<fstream>
using namespace std;

#define MAXSIZE 9
#define MARK 1
#define UNMARK 0

typedef struct Point { int x, y; } point;
point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 },
{ -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } };

int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];

void printTour(int m, int n){
	for (int a = 1; a <= m; a++){
		for (int b = 1; b <= n; b++){
			cout << path[a][b] << " ";
		}
		cout << endl;
	}
}

int knightTour(int m, int n, point pos, int counter)
{
	point next;
	if (counter == m * n){
		return 1;
	}
	for (int i = 0; i <8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;
		if (next.x > 0 && next.x <= n && next.y > 0 && next.y <= m && board[next.y][next.x] != MARK)
		{
			board[next.y][next.x] = MARK;
			path[next.y][next.x] = counter + 1;
			if (knightTour(m, n, next, counter + 1))
				return 1;
			board[next.y][next.x] = UNMARK;
		}
	}
	return 0;
}

int main(void)
{
	ifstream inStream;
	inStream.open("input.txt");

	int m, n;
	int numCases;
	point start;

	inStream >> numCases;

	for (int k = 0; k < numCases; k++){
		inStream >> m >> n >> start.y >> start.x;

		for (int i = 1; i <= m; i++)
			for (int j = 1; j <= n; j++)
				board[i][j] = UNMARK;
		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1)){
			cout << "1" << endl;
			printTour(m, n);
		}
		else
			cout << "0" << endl;
	}
	inStream.close();
}