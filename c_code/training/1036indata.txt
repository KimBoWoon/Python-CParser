
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define TRUE 1	
#define FALSE !TRUE

typedef struct node Node;	
typedef struct list List;

struct node {
	int *array;
	Node *link;
};

struct list
{
	Node *front;
};

List *CreateList();	
void InsertNode(List *list, int *array);	
void DestroyNode(List *list);	
void check(int *array, int length);	
int checkZero(int *array, int length);	
int checkLoop(List *list, int *array, int length);	

void main() {
	int numTestCase = 0;
	int length = 0;
	int i = 0, j = 0;
	int *array = NULL;
	FILE *f;
	f = fopen("input.txt", "r");
	fscanf(f, "%d", &numTestCase);

	for (i = 0; i < numTestCase; i++) {
		fscanf(f, "%d", &length);
		array = (int *)malloc(sizeof(int)*length);
		for (j = 0; j < length; j++) {
			fscanf(f, "%d", &array[j]);
		}
		check(array, length);
		if (!array)	
			free(array);
	}
}

List *CreateList() {
	List *list = (List *)malloc(sizeof(List));
	list->front = NULL;
	return list;
}

void InsertNode(List *list, int *array) {
	Node *tail = list->front;
	Node *newNode = (Node *)malloc(sizeof(Node));
	newNode->array = array;
	newNode->link = NULL;
	
	if (list->front == NULL)
		list->front = newNode;
	else {
		while (tail->link)
			tail = tail->link;
		tail->link = newNode;
	}
}

void DestroyNode(List *list) {
	Node *begin = list->front;
	while (begin) {	
		Node *deleteNode = begin;
		begin = begin->link;
		free(deleteNode->array);
		free(deleteNode);
		deleteNode = NULL;
	}
	free(list);	
}

void check(int *array, int length) {
	int i = 0;
	int *temp = NULL;
	List *list = CreateList();
	
	while (1) {
		temp = (int *)malloc(sizeof(int)*length);
		if (list->front == NULL) {	
			for (i = 0; i < length; i++)
				*(temp + i) = *(array + i);
		}
		else {	
			for (i = 0; i < length; i++) {
				if (i < length - 1) *(temp + i) = abs(*(array + i) - *(array + i + 1));
				else *(temp + i) = abs(*(array + i) - *(array));
			}
			for (i = 0; i < length; i++) {
				*(array + i) = *(temp + i);
			}
		}
		if (checkZero(temp, length)) {	
			printf("ZERO\n");
			DestroyNode(list);
			break;
		}
		if (checkLoop(list, temp, length)) {	
			printf("LOOP\n");
			DestroyNode(list);
			break;
		}
		InsertNode(list, temp); 
	}
	if (!temp)
		free(temp);
}

int checkZero(int *array, int length) {	
	int i = 0;
	for (i = 0; i < length; i++) {
		if (*(array + i) != 0)
			return FALSE;
	}
	return TRUE;
}

int checkLoop(List *list, int *array, int length) {	
	int i = 0;
	Node *temp = list->front;
	
	while (temp) {
		for (i = 0; i < length; i++) {
			if (*(temp->array + i) != *(array + i))
				break;
			if (i == length - 1)
				return TRUE;
		}
		temp = temp->link;
	}
	return FALSE;
}