


#include <stdio.h>
#include <stdlib.h>

typedef struct {
	int x;
	int y;
}coordi;

int cha(const coordi* val1, const coordi* val2)
{
	if (val1->x != val2->x)				
		return (val1->x - val2->x);
	return val1->y - val2->y;			
}

int cha2(const coordi* val1, const coordi* val2)
{
	return val2->y - val1->y;			
}

int main()
{
	FILE* inFile = fopen("input.txt", "r");
	int numTestCases = 0;


	if (inFile == NULL)
	{
		printf("cannot open the file\n");
		exit(1);
	}

	fscanf(inFile, "%d", &numTestCases);
	while (numTestCases--)
	{
		int value, cnt;
		coordi *road = NULL;
		int i, j;
		int m[10] = { 0, };

		fscanf(inFile, "%d", &value);
		road = (coordi *)malloc(value * sizeof(coordi));
		coordi *begin;
		begin = road;
		coordi *end = road + value;
		coordi *st;

		for (i = 0; i < value; i++, begin++)				
		{
			fscanf(inFile, "%d %d", &begin->x, &begin->y);
		}

		fscanf(inFile, "%d", &cnt);						
		for (j = 0; j < cnt; j++)							
		{
			fscanf(inFile, "%d", &m[j]);
		}

		qsort(road, value, sizeof(coordi), cha);

		begin = road;								

		for (i = 0; i < value; i++, begin++)
		{
		}

		begin = road;								
		if (begin->y != 0)							
		{
			coordi *start = begin;
			for (i = 0; i < 100001; i++)
			{
				begin++;
				if (begin->y == 0)
				{
					begin->y = start->y;
					begin = road;
					begin->y = 0;
					break;
				}
			}
			if ((begin + 1)->y < 0)
			{
				qsort(road + 1, i, sizeof(coordi), cha2);
			}
		}

		while (begin->x == 0)
		{
			begin++;
		}
		i = 1;

		for (; begin < end; begin++)
		{
			if ((begin - 1)->y > begin->y)
			{
				st = begin;
				while (begin->x == (begin + 1)->x)
				{
					begin++;
					i++;
				}
				qsort(st, i, sizeof(coordi), cha2);
				i = 1;
				begin++;
			}
		}



		begin = road;
		for (i = 0; i < cnt; i++)							
		{
			printf("%d %d\n", (begin + m[i] - 1)->x, (begin + m[i] - 1)->y);
		}
		free(road);
	}
	fclose(inFile);
	return 0;
}

