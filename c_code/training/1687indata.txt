

#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cstdlib>

using namespace std;

struct compareVal {
	inline bool operator()(const pair<int, int> &lhs, const pair<int, int> &rhs) const {
		if (lhs.first == rhs.first) return lhs.second > rhs.second;
		else return lhs.first < rhs.first;
	}
};


int main()
{
	ifstream infile;
	int testCase;
	int n, m; 
	vector< pair<int, int> > pVector;
	int cafeNum[11];
	infile.open("input.txt");
	
	infile >> testCase;

	for (int i = 0; i < testCase; i++)
	{
		
		infile >> n; 
		pVector.resize(n);
		for (int j = 0; j < n; j++)
		{
			infile >> pVector[j].first >> pVector[j].second; 
		}
		infile >> m;
		for (int j = 0; j < m; j++)
		{
			cafeNum[j]=0;
		}
		for (int j = 0; j < m; j++)
		{
			infile >> cafeNum[j];
		}
		sort(pVector.begin(), pVector.end());
		
		if (pVector[0].first != 0 || pVector[0].second != 0)
		{
			int t = 0;
			while (t < n && pVector[t].first == 0) t++;

			sort(pVector.begin(), pVector.begin() + t, compareVal());
		}

		for (int j = 0; j < n-1; j++) {
			const int &x = pVector[j + 1].first;
			if (pVector[j].first != x && pVector[j].second != pVector[j + 1].second)
			{
				int t = j + 1;
				while (t < n && pVector[t++].first == x);

				sort(pVector.begin() + j + 1, pVector.begin() + t, compareVal());
			}
		}

		for (int j = 0; j < m; j++)
		{
			cout << pVector[cafeNum[j]-1].first <<" "<< pVector[cafeNum[j]-1].second<<endl;
		}
	}

	infile.close();

	return 0;
}