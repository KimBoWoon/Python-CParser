


#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable : 4996)
#define MAXSIZE 9
#define MARK 1
#define UNMARK 0
typedef struct Point
{
	int x, y;
} point;
point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 }, { -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } };
int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];
int knightTour(int m, int n, point pos, int counter)
{
	int i;
	point next;
	if (counter == m*n)
	{
		return 1;
	}
	for (i = 0; i < 8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if (next.x > 0 && next.x <= n &&next.y > 0 && next.y <= m && board[next.y][next.x] != MARK)
		{
			board[next.y][next.x] = MARK;
			path[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter + 1))
				return 1;

			board[next.y][next.x] = UNMARK;
		}
	}
	return 0;
}
void main()
{
	FILE* inFile;
	int testCases = 0, i = 0, m = 0, n = 0, j, k, x, y, check = 0;
	point start;
	inFile = fopen("input.txt", "r");
	if (inFile == NULL)
	{
		exit(1);
	}
	fscanf(inFile, "%d", &testCases);
	for (i = 0; i < testCases; i++)
	{
		fscanf(inFile, "%d %d", &m, &n);
		fscanf(inFile, "%d %d", &x, &y);
		start.x = y;
		start.y = x;
		for (j = 1; j <= m; j++)
		{
			for (k = 1; k <= n; k++)
				board[j][k] = UNMARK;
		}
		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;
		check = knightTour(m, n, start, 1);
		printf("%d\n", check);
		if (check)
		{
			for (j = 1; j <= m; j++)
			{
				for (k = 1; k <= n; k++)
				{
					if (path[j][k] / 10 == 0)
						printf(" %d ", path[j][k]);
					else
						printf("%d ", path[j][k]);
				}
				printf("\n");
			}
		}
		check = 0;
	}
	fclose(inFile);
}