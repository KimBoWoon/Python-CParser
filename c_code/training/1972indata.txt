

#include<iostream>
#include<fstream>
#include<cstdlib>
using namespace std;

struct Part{
	int key;
	int value;
};

void settingPart(Part& pre, Part& post, Part& thisNum, int t){
	if (t == pre.key)
		pre.value++;
	else if (t > pre.key && t < thisNum.key){
		pre.key = t;
		pre.value = 1;
	}
	else if (t < post.key && t > thisNum.key){
		post.key = t;
		post.value = 1;
	}
	else if (t == post.key){
		post.value++;
	}
}

int getNum(Part& pre, Part& post, Part& thisNum){
	int res = 0;
	if (thisNum.value != 0)
		res = thisNum.value;
	else{
		if (post.key - thisNum.key == thisNum.key - pre.key)
			res = post.value + pre.value;
		else if (post.key - thisNum.key > thisNum.key - pre.key)
			res = pre.value;
		else if (post.key - thisNum.key < thisNum.key - pre.key)
			res = post.value;
	}
	return res;
}

int cmp(const void* value0, const void* value1) {
	return *(int*)value0 - *(int*)value1;
}

int main(){
	ifstream File;
	int numCase = 0;
	int size = 0, num = 0, n;
	int* arr = NULL;
	
	File.open("input.txt");
	File >> numCase;
	for (int iter = 0; iter < numCase; iter++){
		Part pre = { -200000000, 0 }, thisNum = { 0, 0 }, post = { 200000000, 0 };
		File >> size >> num;
		arr = new int[size];
		thisNum.key = num;
		for (int i = 0; i < size; i++){
			File >> n;
			arr[i] = n;
		}
		qsort(arr, size, sizeof(int), cmp);
		int front = 0, back = size-1;
		while (front != back){
			int n = arr[front] + arr[back];
			if (n > num){
				settingPart(pre, post, thisNum, n);
				back--;
			}
			else if (n < num){
				settingPart(pre, post, thisNum, n);
				front++;
			}
			else{
				front++;
				thisNum.value++;
			}

		}
		cout << getNum(pre, post, thisNum) << endl;
		delete[] arr;
	}
	File.close();
	return 0;
}