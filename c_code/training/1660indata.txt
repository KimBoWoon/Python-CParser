

#include <stdio.h>
#include <stdlib.h>

typedef struct Point
{
	int x;
	int y;
}point;

int comparePoint( const void* a, const void* b)
{
	if( ((point*)a)->x > ((point*)b)->x )
	{
		return 1;
	}
	else if ( ((point*)a)->x == ((point*)b)->x )  
	{
		if( ((point*)a)->y - ((point*)b)->y > 0 )  
			return 1;
		else
			return -1;
	}
	else
		return -1;
}
int compareDsc(const void* a, const void* b)
{
	if( ((point*)a)->y > ((point*)b)->y )
	{
		return -1;
	}
	else
		return 1;
}


int main()
{
	FILE* infile;
	infile = fopen("input.txt","r");
	int numTests;
	int i;
	fscanf(infile,"%d",&numTests);
	for( i=0; i< numTests; i++)
	{
		int size;
		int j;
		int cnt=0;
		point* p=NULL;
		int cafeSize;
		int* cafe;
		int k;

		fscanf(infile,"%d",&size);
	
		p = (point*)malloc(sizeof(point)*size);

	
		for( j= 0 ; j< size; j++)
		{
			fscanf(infile,"%d %d", &(p+j)->x,&(p+j)->y);
		}

		qsort( p, size, sizeof(point), comparePoint);

		
		for( j=0; j< size; j++)
		{
			cnt =0;
			if ( j== size-1)
				break;
			
			if( (p+j)->y !=0 && j == 0 )
			{
				k = j;
				while ( (p+k)->x == 0 && k<size )
				{
					k++;

					cnt++;
					
				}
		

				qsort(p, cnt, sizeof(point), compareDsc);
			}
			else if ( (p+j)->y != (p+j+1)->y && (p+j)->x != (p+j+1)->x )
			{
				k=j+1;
				while ( (p+k)->x == (p+j+1)->x && k<size )
				{
					k++;

					cnt++;
				}

				qsort(p+j+1, cnt, sizeof(point), compareDsc);
			}

		}



		fscanf(infile, "%d", &cafeSize);

		cafe = (int*)malloc(sizeof(int)*cafeSize);

		for( j=0; j< cafeSize; j++)
		{
			fscanf(infile, "%d", cafe+j);

			
			printf("%d %d\n", (p+(*(cafe+j)-1))->x, (p+(*(cafe+j)-1))->y);
		}
		
		free(p);
		free(cafe);
		
	}
	return 0;
}
