
#include<iostream>
#include<fstream>
#include<algorithm>

using namespace std;

typedef struct cafe{
	int x;
	int y;
} Cafe;

int compare(const void *A, const void  *B){
	Cafe* ptrA = (Cafe*)A;
	Cafe* ptrB = (Cafe*)B;
	if (ptrA->x < ptrB->x) return -1;
	else if (ptrA->x == ptrB->x){ 
		if (ptrA->y < ptrB->y) return -1;
		else return 1;
	}
	else return 1;

}

int main(){
	ifstream in_F("input.txt");
	int cases;
	in_F >> cases;
	while (cases--){
		int cafeCount;
		Cafe* cafe;
		in_F >> cafeCount; 
		cafe = new Cafe[cafeCount];
		for (int i = 0; i < cafeCount; i++){
			in_F >> cafe[i].x >> cafe[i].y;
		}
		qsort(cafe, cafeCount, sizeof(Cafe), compare);
		int temp;
		if (cafe[0].y != 0){
			for (int i = 1; i < cafeCount; i++){
				if (cafe[i].y == 0){
					for (int j = 0; j < (i+1) / 2; j++){
						temp = cafe[j].y;
						cafe[j].y = cafe[i-j].y;
						cafe[i - j].y = temp;
					}
					break;
				}
			}
		}
		for (int i = 1; i < cafeCount; i++){
			if (cafe[i-1].x != cafe[i].x && cafe[i-1].y != cafe[i].y){
				for (int j =i; j < cafeCount; j++){
					if (cafe[j].x != cafe[j+1].x){
						for (int k = 0; k < (j - i+1) / 2; k++){
							temp = cafe[i+k].y;
							cafe[i+k].y = cafe[j-k].y;
							cafe[j-k].y = temp;
						}
						break;
					}
				}
			}
		}
		in_F >> cafeCount;
		for (int i = 0; i < cafeCount; i++){
			int cafeNo;
			in_F >> cafeNo;
			cout << cafe[cafeNo-1].x << " " << cafe[cafeNo-1].y << endl;
		}
	}
}
