


#include<stdio.h>
#include<stdlib.h>

typedef struct point
{
	int x;
	int y;
} POINT;

int compare(const void *_a, const void *_b)
{
	POINT p1 = (*(POINT *) _a);
	POINT p2 = (*(POINT *) _b);
	int result = p1.x - p2.x;

	if(0 == result)
	{
		return p1.y - p2.y;
	}

	return result;
}

int recompare(const void *_a, const void *_b)
{
	int y1 = (*(POINT *) _a).y;
	int y2 = (*(POINT *) _b).y;

	return y2-y1;
}

void resort(POINT **_p, int _cnt)
{
	int i=0, j;

	if(0 != (*_p)[0].y)
	{
		for(i=1; ; i++)
		{
			if(0 == (*_p)[i].y)
			{
				break;
			}
		}
		qsort(&(*_p)[0], i+1, sizeof(POINT), recompare);
	}

	for( ; i<_cnt-1; i++)
	{
		if(0 > ((*_p)[i+1].y - (*_p)[i].y))
		{
			j = i+1;
			for( ; j<_cnt-1; j++)
			{
				if(0 > (*_p)[j+1].y - (*_p)[j].y)
				{
					break;
				}
			}
			qsort(&(*_p)[i+1], j-i, sizeof(POINT), recompare);
			i = j;
		}
	}
}

int main(void)
{
	FILE *fp = NULL;
	int testCase;

	fp = fopen("input.txt", "r");
	fscanf(fp, "%d", &testCase);
	while(testCase--)
	{
		int cafeCnt, i, findCafeCnt, target;
		POINT *p = NULL;

		fscanf(fp, "%d", &cafeCnt);
		p = (POINT *) malloc (cafeCnt * sizeof(POINT));
		for(i=0; i<cafeCnt; i++)
		{
			fscanf(fp, "%d %d", &(p[i].x), &(p[i].y));
		}
		qsort(p, cafeCnt, sizeof(POINT), compare);
		resort(&p, cafeCnt);

		fscanf(fp, "%d", &findCafeCnt);
		for(i=0; i<findCafeCnt; i++)
		{
			fscanf(fp, "%d", &target);
			target = target - 1;
			printf("%d %d\n", p[target].x, p[target].y);
		}

		free(p);
	}

	fclose(fp);
	return 0;
}