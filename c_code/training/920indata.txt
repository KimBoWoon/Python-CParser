#include <stdio.h>
#include <stdlib.h>

int solutionArr[1001][1001] = {0};

void resetZero(int *arr, int size);   
int cardGame(int *n, int *s, int first, int last);   
int MAX(int a, int b);   

void main()
{
   FILE *f;
   int i;
   int count;

   f = fopen("input.txt", "r");

   if (f == NULL)   exit(1);

   fscanf(f, "%d", &count);

   for (i = 0; i<count; i++)
   {
      int j,k;
      int numCnt;
      int *numArr;
      int *sumArr;

      fscanf(f, "%d", &numCnt);
      numArr = (int*)malloc(sizeof(int) * (numCnt + 1));   
      sumArr = (int*)malloc(sizeof(int) * (numCnt + 1));   

      resetZero(sumArr, numCnt);   
	  

      for (j = 1; j <= numCnt; j++)   
      {
         fscanf(f, "%d", &numArr[j]);
         sumArr[j] = sumArr[j - 1] + numArr[j];
      }
      printf("%d\n", cardGame(numArr, sumArr, 1, numCnt));   
      free(numArr);
      free(sumArr);
	  if(i == count-1)
		  break;
	  else
	  {
		  for(j=0; j<=numCnt; j++)
			for(k=0; k<=numCnt; k++)
				solutionArr[j][k] = 0;	  
	  }
   }
   fclose(f);
}
void resetZero(int *arr, int size)
{
   int i;
   for (i = 0; i<=size; i++)
      arr[i] = 0;
}

int cardGame(int *n, int *s, int first, int last)
{
   if (first > last)
      return 0;
   if (first == last)
      return n[first];
   if (solutionArr[first][last] > 0)
      return solutionArr[first][last];
   else
   {
      solutionArr[first][last] = MAX(s[last] - s[first - 1] - cardGame(n, s, first + 1, last), s[last] - s[first - 1] - cardGame(n, s, first, last - 1));
      return solutionArr[first][last];
   }
}
int MAX(int a, int b)
{
   return ((a) > (b) ? (a) : (b));
}