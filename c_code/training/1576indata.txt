#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

class Point {
public:
	int row, col;

	Point(int _row, int _col) : row(_row), col(_col) {}
	Point() {}
};
int dir[10][10];
int value[10][10];
int dir_row[8] = { -2, -1, 1, 2, 2, 1, -1, -2 };
int dir_col[8] = { 1, 2, 2, 1, -1, -2, -2, -1 };
int knightTour(int m, int n, Point pos, int counter){
	int i;
	Point next;

	if (counter == m * n)	return 1;

	for (i = 0; i < 8; i++){

		next.row = pos.row + dir_row[i];
		next.col = pos.col + dir_col[i];
		if (next.row > 0 && next.row <= m &&
			next.col > 0 && next.col <= n &&
			!value[next.row][next.col])
		{
			value[next.row][next.col] = true;
			dir[next.row][next.col] = counter + 1;

			if (knightTour(m, n, next, counter + 1))
				return 1;

			value[next.row][next.col] = false;
		}

	}
	return 0;
}
int main() {
	ifstream file;
	file.open("input.txt");
	int cases;
	file >> cases;

	while (cases--) {

		int row_size, col_size;
		file >> row_size >> col_size;
		Point start;
		file >> start.row >> start.col;

		
		
		for (int i = 1; i <= row_size; i++)
			for (int j = 1; j <= col_size; j++) {
			value[i][j] = false;
			}

		
		bool isComplete = false;
		int row = start.row, col = start.col;
		vector <Point> stack;
		value[row][col] = true;
		dir[row][col] = 1;
		Point temp_1(row, col);
		stack.push_back(temp_1);

		if (knightTour(row_size, col_size, temp_1, 1)){
			cout << 1 << endl;
			for (int i = 1; i <= row_size; i++){
				for (int j = 1; j <= col_size; j++){
					printf("%2d ", dir[i][j]);
				}
				cout << endl;
			}
		}
		else{
			cout << 0 << endl;
		}
	}


	return -1;
}