

#include<iostream>
#include<string>
#include<fstream>

using namespace std;

int num = 0, target = 0, cnt = 0, min = 1000000000, sum = 0;

void quick_sort(int *arr, int left, int right)
{
	int i, j;
	int temp;
	int pivot = arr[left];
	if (left < right)
	{
		i = left;
		j = right + 1; 
		while (i <= j)
		{
			do
				i++;
			while (arr[i] < pivot); 
			do
				j--;
			while (arr[j] > pivot); 
			if (i<j) 
			{
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			else 
				break;
		}
		temp = arr[j];
		arr[j] = arr[left];
		arr[left] = temp;
		quick_sort(arr, left, j - 1); 
		quick_sort(arr, j + 1, right);
	}
}

int convertNegative(int num){
	if (num < 0){
		return -num;
	}
	else{
		return num;
	}
}

void searchTarget(int *arr){
	int start = 0;         
	int end = num - 1;      
	int cnt = 0;
	int min = 1000000000;            

	while (1){
		int sum = arr[start] + arr[end] - target;

		if (convertNegative(sum) < min){   
			min = convertNegative(sum);
			cnt = 1;      
		}
		else if (convertNegative(sum) == min){   
			cnt++;
		}
		if (sum >= 0){   
			end--;
		}
		else{
			start++;
		}
		if (start >= end){
			break;
		}
	}
	cout << cnt << endl;
}

int main(){
	ifstream f;
	f.open("input.txt");
	int numCount = 0, left = 0, right = 0; 
	int *numArray;

	f >> numCount;
	for (int i = 0;i<numCount;i++){
		f >> num >> target;
		numArray = new int[num];
		for (int j = 0; j<num; j++){
			f >> numArray[j];
		}
		right = num - 1;
		quick_sort(numArray, 0, right);
		searchTarget(numArray);
	}
	return 0;
}
