

#include <stdio.h>
#include <stdlib.h>
typedef struct _point{
	int x;
	int y;
	int level;
}point;
int cmp(const void* a, const void* b)
{
	point po1=*(point*)a;
	point po2=*(point*)b;
	if(po1.x>po2.x)
		return 1;
	else if(po1.x==po2.x)
	{
		if(po1.y>po2.y)
			return 1;
		else if(po1.y==po2.y)
			return 0;
		else
			return -1;
	}
	else
		return -1;
}
int compare(const void*a, const void* b)
{
	point po1=*(point*)a;
	point po2=*(point*)b;
	if(po1.level>po2.level)
		return 1;
	else if(po1.level==po2.level)
		return 0;
	else
		return -1;
}
point cafe[100000];
void main()
{
	FILE* inFile;
	int testCase=0, i=0, numberOfCafe=0, j=0, path=0, k=0, last=0,lY=0, number, n;
	inFile=fopen("input.txt", "r");
	if(inFile==NULL)
	{
		exit(1);
	}
	fscanf(inFile, "%d", &testCase);
	for(i=0; i<testCase; i++)
	{
		fscanf(inFile, "%d", &numberOfCafe);
		for(j=0; j<numberOfCafe; j++)
		{
			fscanf(inFile, "%d %d", &cafe[j].x, &cafe[j].y);
			cafe[j].level=0;
		}
		qsort(cafe, numberOfCafe, sizeof(point),cmp);
		for(j=0; j<numberOfCafe; j++)
		{
			last=j;
			for(k=j+1; k<numberOfCafe; k++)
			{
				if(cafe[k].x==cafe[j].x)
					last=k;
				else
					break;
			}
			if(cafe[j].y>=lY)
			{
				for(k=j; k<=last; k++)
				{
					cafe[k].level=path+1;
					path+=1;
				}
				lY=cafe[last].y;
			}
			else
			{
				for(k=last; k>=j; k--)
				{
					cafe[k].level=path+1;
					path+=1;
				}
				lY=cafe[j].y;
			}
			j=last;
		}
		qsort(cafe, numberOfCafe, sizeof(point), compare);
		fscanf(inFile, "%d", &number);
		for(k=0; k<number; k++)
		{
			fscanf(inFile, "%d", &n);
			printf("%d %d\n", cafe[n-1].x, cafe[n-1].y);
		}
		path=0;
		last=0;
		lY=0;
	}
}
