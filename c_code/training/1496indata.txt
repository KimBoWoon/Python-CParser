


#include<stdio.h>
#include<stdlib.h>

#define MARK 1
#define UNMARK 0

typedef struct Point
{
	int x;
	int y;
} point;

int **map = NULL;
int **path = NULL;
int t, m, n, result;

point direction[8] = {      
	{1, -2},
	{2, -1},
	{2, 1},
	{1, 2},
	{-1, 2},
	{-2, 1},
	{-2, -1},
	{-1, -2}
};

int knightTour(point _pos, int _counter)    
{
	int i;
	point next;

	if(_counter == m * n)
	{
		return 1;
	}

	for(i=0; i<8; i++)
	{
		next.x = _pos.x + direction[i].x;
		next.y = _pos.y + direction[i].y;
		if(0 <= next.x && next.x < m)
		{
			if(0 <= next.y && next.y < n)
			{
				if(MARK != map[next.x][next.y])
				{
					map[next.x][next.y] = MARK;
					path[next.x][next.y] = _counter+1;

					if(knightTour(next, _counter+1))
					{
						return 1;
					}

					map[next.x][next.y] = UNMARK;
				}
			}
		}
	}

	return 0;
}

void printTour(int _result)     
{
	int i, j;

	printf("%d\n", _result);

	if(0 == _result)
	{
		return;
	}

	for(i=0; i<m; i++)
	{
		for(j=0; j<n; j++)
		{
			printf("%d ", path[i][j]);
		}
		printf("\n");
	}
}

void createM(int ***_tmp)       
{
	int i;

	(*_tmp) = (int **) malloc ((m) * sizeof(int *));
	for(i=0; i<m; i++)
	{
		(*_tmp)[i] = (int *) malloc ((n) * sizeof(int));
	}
}

void initM(int ***_tmp)     
{
	int i, j;

	for(i=0; i<m; i++)
	{
		for(j=0; j<n; j++)
		{
			(*_tmp)[i][j] = UNMARK;
		}
	}
}

void freeM(int ***_tmp)     
{
	int i;

	for(i=0; i<m; i++)
	{
		free((*_tmp)[i]);
	}
	free(*_tmp);
}

int main(void)
{
	FILE *fp = NULL;

	fp = fopen("input.txt", "r");
	fscanf(fp, "%d", &t);
	while(t--)
	{
		point start;

		fscanf(fp, "%d %d", &m, &n);
		fscanf(fp, "%d %d", &start.x, &start.y);        
		start.x = start.x - 1;
		start.y = start.y - 1;

		createM(&map);
		createM(&path);
		initM(&map);

		map[start.x][start.y] = MARK;
		path[start.x][start.y] = 1;

		result = knightTour(start, 1);
		printTour(result);

		freeM(&map);
		freeM(&path);
	}

	fclose(fp);
	return 0;
}