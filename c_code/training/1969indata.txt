
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cmath>
using namespace std;

int compare(const void * a, const void * b)
{
	return (*(int*)a - *(int*)b);
}

void findNearest(int* arr, int key, int start, int end, int* min, int* cnt) {
	int left = start;
	int right = end;
	int mid = 0;

	int tmp[3] = { 0, };


	if (left > right) {
		return;
	}

	while (left <= right) {
		mid = (left + right) / 2;
		if (arr[mid] == key) {
			break;
		}
		if (key < arr[mid]) {
			right = mid - 1;
			continue;
		}
		if (key > arr[mid]) {
			left = mid + 1;
			continue;
		}
	}


	tmp[0] = (mid - 1 >= start) ? abs(key - arr[mid - 1]) : -1;
	tmp[1] = abs(key - arr[mid]);
	tmp[2] = (mid + 1 <= end) ? abs(key - arr[mid + 1]) : -1;



	if (arr[mid] == key) {
		*min = tmp[1];
		*cnt = 1;
		return;
	}

	*min = tmp[1];
	*cnt = 0;
	for (int i = 0; i<3; i++) { 
		if (tmp[i] != -1 && tmp[i] < *min) {
			*min = tmp[i];
		}
	}
	for (int i = 0; i<3; i++) {
		if (tmp[i] == *min) {
			(*cnt)++;
		}
	}
}


int main(){

	int caseNum = 0;

	ifstream inputFile("input.txt");

	inputFile >> caseNum;

	for (int i = 0; i < caseNum; i++){

		int testNum = 0, findNum = 0, key = 0, start = 0, end = 0, min = 0, cnt = 0, minDiff = 0, minCnt = 0;
		int* arr;
		inputFile >> testNum >> findNum;

		arr = new int[testNum];

		for (int i = 0; i < testNum; i++)
			inputFile >> arr[i];
		
		qsort(arr, testNum, sizeof(int), compare);

		for (int i = 0; i<testNum - 1; i++) {
			{ 
				key = findNum - arr[i];
				start = i + 1;
				end = testNum - 1;

				min = -1; 
				cnt = 0;

			}


			findNearest(arr, key, start, end, &min, &cnt);

			if (i == 0) { 
				minDiff = min;
				minCnt = cnt;
			}
			else { 
				if (min == minDiff) {
					minCnt += cnt;
				}
				if (min < minDiff) {
					minDiff = min;
					minCnt = cnt;
				}
			}

		}
		cout << minCnt << endl;

		delete arr;

	}

	return 0;
}
