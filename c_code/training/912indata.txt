


#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string.h>

#define min(a,b) ((a)<(b)?(a):(b))		
#define max(a,b) ((a)>(b)?(a):(b))		
using namespace std;

int main()
{
	ifstream inStream;
	int numTestCases;		
	int fCount, min, i, j, n, m;
	int file[1001];
	int S[1001];

	inStream.open("input.txt");

	if (inStream.fail())
	{
		cerr << "Input file opening failed.\n";
		exit(1);
	}

	inStream >> numTestCases;	
	for (int q = 0; q < numTestCases; q++)
	{
		inStream >> fCount;
		int range = fCount + 1;

		for (i = 1; i <= fCount; i++)
			inStream >> file[i];

		int **D = new int*[range];
		for (i = 0; i <= fCount; i++)
		{
			D[i] = new int[range];
			memset(D[i], 0, sizeof(int)*range);
		}

		D[1][fCount] = 0;

		S[0] = 0;
		for (i = 1; i <= fCount; i++)
		{
			S[i] = S[i - 1] + file[i];		
			D[i][i] = file[i];				
		}

		for (i = 2; i <= fCount; i++)
			D[i - 1][i] = max(D[i - 1][i - 1], D[i][i]);		

		for (i = 3; i <= fCount; i++)
			D[i - 2][i] = (S[i] - S[i - 3]) - min(D[i - 2][i - 1], D[i - 1][i]);		

		for (n = 4; n <= fCount; n++)		
		{
			i = 1, j = n;
			for (m = n; m <= fCount; m++)
			{
				min = min(D[i][m - 1], D[i + 1][j]);
				D[i][j] = S[j] - S[i - 1] - min;		
				i++, j++;
			}
		}



		cout << D[1][fCount] << endl;		
		 
		for (i = 0; i <= fCount; i++)
		{
			delete[] D[i];
		}
		delete[] D;

	}
	inStream.close();
	return 0;
}