#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;
const int MAX = 100000;
vector<int> myVector[MAX];
int main() {
	ifstream instream;
	int numTestCases;
	instream.open("input.txt");
	instream >> numTestCases; 
	for(int i=0; i<numTestCases; i++) {
		int cnt;
		instream >> cnt;
		for(int j=0; j<MAX; j++)
			myVector[j].clear();
		vector<pair<int, int> > points;
		vector<int> dir;
		for(int j=0; j<cnt; j++) {
			int x, y;
			instream >> x >> y;
			myVector[x].push_back(y);
		}
		int data;
		instream >> data;
		for(int j=0; j<MAX; j++)
			sort(myVector[j].begin(), myVector[j].end());
		int y=0;
		for(int j=0; j<MAX; j++) {

			if(myVector[j].empty()) {
				dir.push_back(0);
				continue;
			}
			if(myVector[j].front() == myVector[j].back()) {
				y = myVector[j].front();
				dir.push_back(1);
			} else if(myVector[j].front() == y) {
				y = myVector[j].back();
				dir.push_back(2);
			} else {
				y = myVector[j].front();
				dir.push_back(1);
			}
		}
		for(int j=0; j<MAX; j++) {
			if(dir[j] == 1) {
				for(int k=(int)myVector[j].size()-1; k>=0; k--) {
					points.push_back(make_pair(j, myVector[j][k]));
				}
			} else if(dir[j] == 2) {
				for(int k=0; k<myVector[j].size(); k++) {
					points.push_back(make_pair(j, myVector[j][k]));
				}
			}
		}
		for(int j=0; j<data; j++) {
			int num;
			instream >> num;
			num--;
			cout << points[num].first << " " << points[num].second << endl;
		}
	}
}

