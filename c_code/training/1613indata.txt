#include <iostream>
#include <fstream>
#include <memory.h>

#define MIN(a,b) ((a) < (b) ? (a) : (b))

class MergingFiles
{
public:
	int* files;
	int** table;
	int** fileSize;
	int** flow;
	int numOfFile;
	MergingFiles(int n, int f[]) :numOfFile(n)
	{
		files = new int[numOfFile];
		
		table = new int*[numOfFile];
		for (int i = 0; i < numOfFile; i++)
			table[i] = new int[numOfFile];

		fileSize = new int*[numOfFile];
		for (int i = 0; i < numOfFile; i++)
			fileSize[i] = new int[numOfFile];

		flow = new int*[numOfFile];
		for (int i = 0; i < numOfFile; i++)
		{
			flow[i] = new int[numOfFile];
			memset(flow[i], 0, sizeof(int)*numOfFile);
		}

		memcpy(files, f, sizeof(int)*numOfFile);

	}
	int merge()
	{
		for (int j = 0; j < numOfFile; j++)
			for (int i = j; i > -1; i--)
				if (j == i)
				{
					fileSize[i][j] = files[i];
					table[i][j] = 0;
				}
				else
				{
					fileSize[i][j] = fileSize[i][j - 1] + files[j];
					table[i][j] = minBefore(i, j) + fileSize[i][j];
				}

		return table[0][numOfFile-1];
	}
	int minBefore(int first, int last)
	{
		int min = table[first][first] + table[first+1][last];
		for (int i = first + 1; i < last; i++)
		{
			int temp = table[first][i] + table[i + 1][last];
			min = min < temp ? min : temp;
		}
		return min;
	}
	
	~MergingFiles()
	{
		delete[] files;
		for (int i = 0; i < numOfFile; i++)
			delete[] flow[i];
		delete[] flow;
		for (int i = 0; i < numOfFile; i++)
			delete[] table[i];
		delete[] table;
	}
};

int main()
{
	std::ifstream input;
	input.open("input.txt");
	if (input.fail())
		return -1;
	int numOfCase;
	input >> numOfCase;
	for (int i = 0; i < numOfCase; i++)
	{
		int numOfFile;
		input >> numOfFile;
		int files[500];
		for (int n = 0; n < numOfFile; n++)
			input >> files[n];
		MergingFiles m(numOfFile, files);

		std::cout << m.merge() << std::endl;

	}

	return 0;
}