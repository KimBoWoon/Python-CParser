#include <stdio.h>
#include <stdlib.h>
FILE* in;
void chk(int* set, int key,int start,int end,int* D, int* C);
int compare(const void* a,const void* b);
int main(int argc, char* argv[]) {
	int* set = NULL;
	int minimum_difference = 0;
	int minimum_count = 0;
	int D = 0;
	int C = 0;
	int n = 0, z = 0;
	int q = 0, c = 0;
	int key = 0, start = 0, end = 0;
	int i, j, tmp, flag_update;
	in=fopen("input.txt","r");
	fscanf(in,"%d",&n);
	for (z=0; z<n; z++) {
		fscanf(in,"%d %d", &q, &c); 
		set = (int*)malloc(sizeof(int)*q);
		for (i=0; i<q; i++) { 
			fscanf(in,"%d", &set[i]);
		}
 		qsort(set, q, sizeof(int), compare);
 		for (i=0; i<q-1; i++) {
			{
				key = c - set[i];
				start = i+1;
				end = q-1;
				D = -1;
				C = 0;
				flag_update = 0;
			}
			chk(set, key, start, end, &D, &C);
			if (i == 0) {
				minimum_difference = D;
				minimum_count = C;
				flag_update = 1;
			} else {
				if (D == minimum_difference) {
					minimum_count += C;
				}
				if (D > minimum_difference) {
				}
				if (D < minimum_difference) {
					minimum_difference = D;
					minimum_count = C;
					flag_update = 1;
				}
			}
		}
		printf("%d\n",minimum_count);
		free(set);
	}
	return 0;
}
 
void chk(int* set, int key, int start, int end,int* D, int* C) {
	int left = start;
	int right = end;
	int mid = 0;
	int tmp[3] = {0, };
	int i;
	if (left > right) {
		return;
	}
	while (left <= right) {
		mid = (left + right) / 2;
		if (set[mid] == key) {
			break;
		}
		if (key < set[mid]) {
			right = mid - 1;
			continue;
		}
		if (key > set[mid]) {
			left = mid + 1;
			continue;
		}
	}
	tmp[0] = (mid - 1 >= start) ? abs(key - set[mid - 1] ) : -1;
	tmp[1] = abs(key - set[mid]);
	tmp[2] = (mid + 1 <= end) ? abs(key - set[mid + 1] ) : -1;
	if (set[mid] == key) {
		*D = tmp[1];
		*C = 1;
		return;
	}
	*D = tmp[1];
	*C = 0;
	for (i=0; i<3; i++) { 
		if (tmp[i] != -1 && tmp[i] < *D) {
			*D = tmp[i];
		}
	}
	for (i=0; i<3; i++) { 
		if (tmp[i] == *D) {
			(*C)++;
		}
	}
}
 
int compare(const void* a,const void* b)
{
	return (*((int*)a)) - (*((int*)b));
}