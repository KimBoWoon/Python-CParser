#include <iostream>
#include <fstream>
#include <cstdlib>

#define MAX_M 100
#define MAX_N 100
#define MAX_ROOM 100


int compare(const void* a, const void* b);

class Room
{
private:
	int M;							
	int N;							
	int roomCnt;					
private:
	char blueprint[MAX_N][MAX_M];	
	int roomSpace[MAX_ROOM];		
public:
	Room(const int M, const int N) : roomCnt(0)
	{
		this->M = M; this->N = N;

		for(int i = 0; i < MAX_ROOM; i++)
			roomSpace[i] = 0;
	}
	void buildRoom(std::ifstream& fileDes)
	{
		for(int i = 0; i < N; i++)
		{
			fileDes>>blueprint[i];
		}

	}
	void startCounting()
	{
		for(int i = 1; i < (N-1); i++)
		{

			for(int j = 1; j < (M-1); j++)
			{
				if(blueprint[i][j] == '.')
				{
					travel(i, j);
					roomCnt++;
				}
			}
		}

		qsort(roomSpace, roomCnt, sizeof(int), compare);

		std::cout<<roomCnt<<std::endl;

		for(int i = 0; i < roomCnt; i++)
			std::cout<<roomSpace[i]<<' ';

		std::cout<<std::endl;

	}
	void travel(const int n, const int m)
	{
		if(blueprint[n][m] != '.') return;

		else
		{
			blueprint[n][m] = 'x'; 
			roomSpace[roomCnt]++;


			travel(n+1, m);		
			travel(n, m+1);		
			travel(n-1, m);		
			travel(n, m-1);		
		}

	}



};

int main()
{
	int trialNum;				

	std::ifstream fileDes;		
	fileDes.open("input.txt");


	fileDes>>trialNum;			

	
	for(int i = 0; i < trialNum; i++)
	{
		int M, N;				
		fileDes>>M>>N;		

		Room room(M, N);								
		room.buildRoom(fileDes);						
		room.startCounting();
		

	}

	fileDes.close();

	return 0;

}

int compare(const void* a, const void* b)
{
	return ( *((int*)b) - *((int*)a) );
}