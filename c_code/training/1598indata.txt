
#include<stdio.h>
#include<stdlib.h>
#define BORDER 501
#define MIN(a, b) ( (a) < (b) ? (a) : (b) )
int chapters[BORDER], sum[BORDER], DP[BORDER][BORDER];

int mergingFile(int start, int end){
	int i,j,k,x;
	int min, value;
	for(x=1; x<=(end-start); x++){ 
		for(i=1; i<end; i++){ 
			j=x+i;            
			min=0, value=0;
			if(j <= end){ 
				for(k=i; k<=j-1; k++){
					if(k == i && k+1 == j) value = DP[i][k] + DP[k+1][j]; 
					else if(k == i && k+1 != j) value = (sum[j]-sum[i]) + (DP[i][k] + DP[k+1][j]);  
					else if(k != i && k+1 == j) value = (sum[j-1]-sum[i-1]) + (DP[i][k] + DP[k+1][j]); 
					else value = (sum[j]-sum[i-1]) + (DP[i][k] + DP[k+1][j]); 

					if(min == 0) min = value; 
					min = MIN(min, value);
				}
				DP[i][j]=min;
			}
		}
	}
	return DP[start][end]; 
}

int main(){
	FILE *in = fopen("input.txt","r");

	int i, T;
	fscanf(in, "%d", &T);
	while(T--){
		int K;
		fscanf(in, "%d", &K);
		for(i=1; i<=K; i++){
			fscanf(in, "%d", chapters+i);
			sum[i] = sum[i-1] + chapters[i];
			DP[i][i] = chapters[i];
		}
		printf("%d\n", mergingFile(1,K));
	}
	fclose(in);
	return 0;
}