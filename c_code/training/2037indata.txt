#include<iostream>
#include<fstream>
#include<cstdlib>
using namespace std;

int compute(int* arr, int size, int cnt);
void TwoNumbers(int* arr, int key, int start, int end, int& diff, int& cnt);
int compare(const void* a, const void* b);

int main(){
	ifstream inStream;
	inStream.open("input.txt");

	int numCases = 0;	int size = 0;
	int cnt = 0;

	inStream >> numCases;

	for (int j = 0; j < numCases; j++) {
		inStream >> size >> cnt;

		int* arr = new int[size];

		for (int k = 0; k < size; k++)
			inStream >> arr[k];

		qsort(arr, size, sizeof(int), compare);

		cout << compute(arr, size, cnt) << endl;
	}
}

int compute(int* arr, int size, int cnt){
	int ele = 0, start = 0, end = 0;
	int diff = 0;
	int count = 0;

	int d = 0;
	int c = 0;

	int state;

	for (int i = 0; i < size - 1; i++) {
		ele = cnt - arr[i];
		start = i + 1;
		end = size - 1;
		d = -1;
		c = 0;

		state = 0;

		TwoNumbers(arr, ele, start, end, d, c);

		if (i == 0) {
			diff = d;
			count = c;
			state = 1;
		}
		else {
			if (d == diff)
				count += c;
			if (d < diff) {
				diff = d;
				count = c;
				state = 1;
			}
		}
	}
	return count;
}
void TwoNumbers(int* arr, int key, int start, int end, int& diff, int& cnt){
	int l = start;
	int r = end;
	int m = 0;

	int X[3] = { 0, };

	if (l > r)	return;
	while (l <= r) {
		m = (l + r) / 2;
		if (arr[m] == key) {
			break;
		}
		if (key < arr[m])
			r = m - 1;
		if (key > arr[m])
			l = m + 1;
	}

	X[0] = (m - 1 >= start) ? abs(key - arr[m - 1]) : -1;
	X[1] = abs(key - arr[m]);
	X[2] = (m + 1 <= end) ? abs(key - arr[m + 1]) : -1;

	if (arr[m] == key) {
		diff = X[1];
		cnt = 1;
		return;
	}

	diff = X[1];
	cnt = 0;
	for (int i = 0; i < 3; i++) {
		if (X[i] != -1 && X[i] < diff) {
			diff = X[i];
		}
	}
	for (int i = 0; i < 3; i++) {
		if (X[i] == diff)
			cnt++;
	}
}

int compare(const void* a, const void* b){
	return *(int*)a - *(int*)b;
}