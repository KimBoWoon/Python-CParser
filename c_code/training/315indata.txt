


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define WALL '+'
#define ROOM '.'
#define ROOMCOUNT 100
int room[ROOMCOUNT];
int roomCnt;

char **createMap(int _row, int _col)    
{
	int i;
	char **tmp = NULL;

	tmp = (char **) malloc (_row * sizeof(char *));
	for(i=0; i<_row; i++)
	{
		tmp[i] = (char *) malloc (_col * sizeof(char));
	}

	return tmp;
}

int getRoomSize(char ***_map, int _i, int _j)   
{
	if((*_map)[_i][_j] == WALL)
	{
		return 0;
	}
	else
	{
		int count = 1;
		(*_map)[_i][_j] = WALL;
		count += getRoomSize(&(*_map), _i+1, _j);
		count += getRoomSize(&(*_map), _i-1, _j);
		count += getRoomSize(&(*_map), _i, _j+1);
		count += getRoomSize(&(*_map), _i, _j-1);

		return count;
	}
}

void findRoom(char ***_map, int _row, int _col)     
{
	int i, j;
	int row = _row - 1;
	int col = _col - 1;
	roomCnt = 0;
	memset(room, -1, ROOMCOUNT);

	for(i=1; i<row; i++)
	{
		for(j=1; j<col; j++)
		{
			if((*_map)[i][j] == WALL)
			{
				continue;
			}

			room[roomCnt++] = getRoomSize(&(*_map), i, j);
		}
	}
}

void sortingRoom()      
{
	int i, j;

	for(i=0; i<roomCnt-1; i++)
	{
		for(j=i; j<roomCnt; j++)
		{
			if(room[i] < room[j])
			{
				int tmp = room[i];
				room[i] = room[j];
				room[j] = tmp;
			}
		}
	}
}

void printRoom()        
{
	int i;

	printf("%d\n", roomCnt);
	for(i=0; i<roomCnt; i++)
	{
		printf("%d ", room[i]);
	}
	printf("\n");
}

void freeMap(char ***_map, int _row)    
{
	int i;

	for(i=0; i<_row; i++)
	{
		free((*_map)[i]);
	}
	free(*_map);
}

int main(void)
{
	FILE *fp = NULL;
	int testCase;

	fp = fopen("input.txt", "r");       
	fscanf(fp, "%d", &testCase);        
	while(testCase--)
	{
		int row, col, i;
		char **map = NULL;

		fscanf(fp, "%d %d", &col, &row);    
		map = createMap(row, col);
		for(i=0; i<row; i++)
		{
			fscanf(fp, "%s", map[i]);
		}

		findRoom(&map, row, col);           
		sortingRoom();                      
		printRoom();                        
		freeMap(&map, row);                 
	}

	fclose(fp);                         
	return 0;
}