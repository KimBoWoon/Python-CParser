#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)

typedef struct block
{
	int x;
	int y;
}Block;

void play(Block *block, int blockSize);
int compare(const void *a, const void *b);
void printResult(Block *block, int *cafeNum, int printCase);
int dir = 0;	
void main() {
	int numCases, printCases;
	int numCafe;
	int i, j;
	int *print;
	Block *b;
	FILE *f;

	f = fopen("input.txt", "r");
	fscanf(f, "%d", &numCases);

	for (i = 0; i < numCases; i++) {
		fscanf(f, "%d", &numCafe);
		b = (Block *)malloc(sizeof(Block)*numCafe);
		for (j = 0; j < numCafe; j++) 
			fscanf(f, "%d %d", &(b + j)->x, &(b + j)->y);
		
		fscanf(f, "%d", &printCases);
		print = (int *)malloc(sizeof(int)*printCases);
		for (j = 0; j < printCases; j++)
			fscanf(f, "%d", (print + j));

		play(b, numCafe);
		printResult(b, print, printCases);
		free(b);
		free(print);
	}
}

void play(Block *block, int blockSize) {
	int i, j;
	int check = 0;
	int count = 1;
	qsort((void *)block, blockSize, sizeof(block[0]), compare);
	for (i = 1; i < blockSize; i++) {
		if (i == 1) {
			if ((block + i - 1)->y != 0) {
				dir = 1;
				for (j = i; j < blockSize; j++) {
					if ((block + j)->x == check)
						count++;
				}
				qsort((void *)(block), count, sizeof(block[0]), compare);
				count = 1;
				dir = 0;
			}				
		}

		if ((block + i - 1)->x != (block + i)->x) {
			if ((block + i - 1)->y == (block + i)->y)	
				continue;
			dir = 1;
			check = (block + i)->x;
			for (j = i + 1; j < blockSize; j++) {
				if ((block + j)->x == check)
					count++;
			}
			qsort((void *)(block+i), count, sizeof(block[0]), compare);
			count = 1;
			dir = 0;
		}
	}
}

int compare(const void *a, const void *b)
{
	Block *ptrA = (Block *)a;
	Block *ptrB = (Block *)b;

	if (ptrA->x < ptrB->x)
		return -1;
	else if (ptrA->x > ptrB->x) 
		return 1;
	else if (ptrA->x == ptrB->x) {
		if (!dir) {
			if (ptrA->y < ptrB->y)
				return -1;
			else if (ptrA->y > ptrB->y)
				return 1;
		}
		else {
			if (ptrA->y > ptrB->y)
				return -1;
			else if (ptrA->y < ptrB->y)
				return 1;
		}
	}
}

void printResult(Block *block, int *cafeNum, int printCase) {
	int i;

	for (i = 0; i < printCase; i++) {
		printf("%d %d\n", (block + *(cafeNum + i) - 1)->x, (block + *(cafeNum + i) - 1)->y);
	}
}