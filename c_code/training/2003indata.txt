

#pragma warning(disable : 4996) 

#include <stdio.h>
#include <stdlib.h>

int TwoNumbers(int* arrNum, int target, int size);
void SortQuick(int *dataSet, const int posLeft, const int posRight);
void Swap(int *src, int *dst);

void main(void)
{
	FILE *inFile;
	int i, j;
	int numCases, numData;
	int target;
	int* arrNum = NULL;

	inFile = fopen("input.txt", "r"); 

	if (inFile == NULL) exit(1);
	fscanf(inFile, "%d", &numCases); 
	for (i = 0; i < numCases; i++)
	{
		fscanf(inFile, "%d %d", &numData, &target); 

		arrNum = (int*)malloc(sizeof(int)*numData);

		for (j = 0; j < numData; j++)
			fscanf(inFile, "%d", &arrNum[j]);		

		SortQuick(arrNum, 0, numData - 1);

		printf("%d\n", TwoNumbers(arrNum, target, numData));
	}

	fclose(inFile); 
}

int TwoNumbers(int* arrNum, int target, int size)
{
	int i;
	int cnt = 0;
	int left, right, mid;
	int nearestNum = (int)2e8;											

	for (i = 0; i < size - 1; i++)
	{
		left = i;
		right = size - 1;
		if (arrNum[i] + arrNum[right] <= target)
		{
			if (abs(arrNum[i] + arrNum[right] - target) < nearestNum)		
			{
				nearestNum = abs(arrNum[i] + arrNum[right] - target);		
				cnt = 1;
			}
			else if (abs(arrNum[i] + arrNum[right] - target) == nearestNum)	
				cnt++;
			continue;
		}
		else if (arrNum[i] + arrNum[i + 1] >= target)
		{
			if (abs(arrNum[i] + arrNum[i + 1] - target) < nearestNum)		
			{
				nearestNum = abs(arrNum[i] + arrNum[i + 1] - target);		
				cnt = 1;
			}
			else if (abs(arrNum[i] + arrNum[i + 1] - target) == nearestNum)	
				cnt++;
			continue;
		}
		while (1)
		{
			if (right - left == 1 && left != i)
			{
				if (abs(arrNum[i] + arrNum[left] - target) > abs(arrNum[i] + arrNum[right] - target))
				{
					if (abs(arrNum[i] + arrNum[right] - target) < nearestNum)		
					{
						nearestNum = abs(arrNum[i] + arrNum[right] - target);		
						cnt = 1;
					}
					else if (abs(arrNum[i] + arrNum[right] - target) == nearestNum)	
						cnt++;
				}
				else if(abs(arrNum[i] + arrNum[left] - target) < abs(arrNum[i] + arrNum[right] - target))
				{
					if (abs(arrNum[i] + arrNum[left] - target) < nearestNum)		
					{
						nearestNum = abs(arrNum[i] + arrNum[left] - target);		
						cnt = 1;
					}
					else if (abs(arrNum[i] + arrNum[left] - target) == nearestNum)	
						cnt++;
				}
				else
				{
					if (abs(arrNum[i] + arrNum[left] - target) < nearestNum)		
					{
						nearestNum = abs(arrNum[i] + arrNum[left] - target);		
						cnt = 2;
					}
					else if (abs(arrNum[i] + arrNum[left] - target) == nearestNum)	
						cnt += 2;
				}
				break;
			}
			else if (right - left == 1 && left == i)
			{
				if (abs(arrNum[i] + arrNum[i + 1] - target) < nearestNum)		
				{
					nearestNum = abs(arrNum[i] + arrNum[i + 1] - target);		
					cnt = 1;
				}
				else if (abs(arrNum[i] + arrNum[i + 1] - target) == nearestNum)	
					cnt++;
				break;
			}
			mid = (left + right) / 2;

			if (arrNum[i] + arrNum[mid] < target)
			{
				left = mid;
				continue;
			}
			else if (arrNum[i] + arrNum[mid] > target)
			{
				right = mid;
				continue;
			}
			else if (arrNum[i] + arrNum[mid] == target && nearestNum != 0)		
			{
				nearestNum = 0;
				cnt = 1;
				break;
			}
			else if (arrNum[i] + arrNum[mid] == target && nearestNum == 0)		
			{
				cnt++;
				break;
			}
		}
	}

	return cnt;
}

void SortQuick(int *dataSet, const int posLeft, const int posRight)
{
	int *setData = NULL;
	int pivot = 0;
	int locPivot = 0;
	int left = 0, right = 0;

	setData = dataSet;
	left = posLeft;
	right = posRight;

	locPivot = (left + right) / 2;
	pivot = setData[locPivot];

	while (left <= right)
	{
		while (setData[left] < pivot) left++;

		while (setData[right] > pivot) right--;

		if (left <= right)
		{
			Swap(&setData[left], &setData[right]);
			left++;
			right--;
		}
	}

	if (posLeft < left)
		SortQuick(setData, posLeft, right);

	if (right < posRight)
		SortQuick(setData, left, posRight);
}

void Swap(int *src, int *dst)
{
	int temp = *src;
	*src = *dst;
	*dst = temp;
}