

#include <stdio.h>
#include <stdlib.h>
#define Power(x) ((x)*(x)) 
#define MAX 1000 
int arr[MAX][2]; 
int py[MAX]; 

int paritionAsc(int low, int high) 
{
	int pivotPos, pivot, i, j, tmp;
	pivot = py[low];
	j = low;
	for (i = low + 1; i <= high; i++)
	{
		if (pivot < py[i])
		{
			j++;
			tmp = py[i]; py[i] = py[j]; py[j] = tmp;
		}
	}
	pivotPos = j;
	tmp = py[low]; py[low] = py[pivotPos]; py[pivotPos] = tmp;

	return pivotPos;
}
int paritionDsc(int low, int high) 
{
	int pivotPos, pivot, i, j, tmp;
	pivot = py[low];
	j = low;
	for (i = low + 1; i <= high; i++)
	{
		if (pivot > py[i])
		{
			j++;
			tmp = py[i]; py[i] = py[j]; py[j] = tmp;
		}
	}
	pivotPos = j;
	tmp = py[low]; py[low] = py[pivotPos]; py[pivotPos] = tmp;

	return pivotPos;
}
void quicksort(int low, int high, int flg) 
{
	int pivotPos;
	if (high > low)
	{
		if (flg) pivotPos = paritionAsc(low, high); 
		else
			pivotPos = paritionDsc(low, high);

		quicksort(low, pivotPos - 1, flg);
		quicksort(pivotPos + 1, high, flg);
	}
}


int main(int argc, char* argv[])
{
	int t, n, m, a, b, p, q, i;
	float tmp;
	FILE *fp; 
	fp = fopen("input.txt", "r"); 
	if (fp == NULL) return 0;
	fscanf(fp, "%d", &t); 
	while (t--)
	{
		fscanf(fp, "%d%d", &n, &m); 
		while (m--) 
		{
			fscanf(fp, "%d %d %d %d", &a, &b, &p, &q);
			arr[a][0] += p; arr[a][1] += q;
			arr[b][0] += q; arr[b][1] += p;
		}
		for (i = 1; i <= n; i++)
		{
			tmp = (float)Power(arr[i][0]) / (float)(Power(arr[i][0]) + Power(arr[i][1])); 
			py[i] = (int)(tmp * 1000);
		}
		quicksort(1, n, 1); 
		printf("%d\n", py[1]);
		quicksort(1, n, 0); 
		printf("%d\n", py[1]);

		for (i = 1; i <= n; i++) 
		{
			py[i] = 0;
			arr[i][0] = 0;
			arr[i][1] = 0;
		}
	}
	fclose(fp); 
	return 1;
}