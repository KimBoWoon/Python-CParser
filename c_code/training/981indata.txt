
#include<iostream>
#include<fstream>
#define MAX 101

using namespace std;

int horizon[MAX][MAX], vertical[MAX][MAX], D[MAX][MAX][2][201];

int main()
{
	ifstream in;
	in.open("input.txt");
	if (!in) return 1;

	int test_case;
	in >> test_case;

	for (int t = 0; t < test_case; t++){
		int H, W, L, G;
		in >> H >> W >> L >> G;

		for (int i = 1; i <= H; i++) {
			for (int j = 1; j < W; j++) {
				in >> horizon[i][j];
			}
		}
		for (int i = 1; i < H; i++){
			for (int j = 1; j <= W; j++){
				in >> vertical[i][j];
			}
		}
		for (int i = 1; i <= H; i++) {
			for (int j = 1; j <= W; j++){
				for (int k = 0; k < 2; k++){
					for (int l = 0; l < 201; l++) {
						D[i][j][k][l] = G + 1;
						D[1][1][0][0] = D[1][1][1][0] = 0;
					}
				}
			}
		}
		int ans = 2000000000;
		for (int i = 1; i <= H; i++){
			for (int j = 1; j <= W; j++){
				for (int l = 0; l < 201; l++){
					for (int k = 0; k<2; k++){
						if (D[i][j][k][l] <= G){
							if (i == H && j == W){
								if (ans > l) ans = l;
							}
							if (l < 200 && D[i][j][!k][l + 1] > D[i][j][k][l])
								D[i][j][!k][l + 1] = D[i][j][k][l];
							if (k){
								if (j < W && D[i][j + 1][k][l] > D[i][j][k][l] + horizon[i][j])
									D[i][j + 1][k][l] = D[i][j][k][l] + horizon[i][j];
							}
							else{
								if (i < H && D[i + 1][j][k][l] > D[i][j][k][l] + vertical[i][j])
									D[i + 1][j][k][l] = D[i][j][k][l] + vertical[i][j];
							}
						}
					}
				}
			}
		}
		if (ans < 2000000000) cout << (H + W - 2)*L + ans << endl;
		else cout << "-1" << endl;
	}
	in.close();
	return 0;
}