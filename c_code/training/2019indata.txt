


#include<iostream>
#include<fstream>
#include<algorithm>

int binarySearch(int a[], int left, int right, int value,int i);
int main(int argc, char* argv[]){
	
	std:: ifstream is;
	is.open("input.txt"); 
	
	int times; 
	is >> times;

	for(int i = 0; i < times; i++){

		int target;
		int num;
		
		is>> num >> target;

		int *s = new int[num];
		for(int i = 0; i < num; i ++)
			is >> s[i];

		int min = 200000000;
		int cnt = 0;
					
		std::sort(s,s+num);
		
		for(int i =0 ; i < num-1; i ++){
			int n = target - s[i];
			int j = binarySearch(s,i+2,num-1,n,i);
			int sub = abs(target-(s[i]+s[j]));

			if(i >= j)
				continue;

			if(min > sub){
				min = sub;
				cnt = 1;
			}
			else if(min == sub)
				cnt++;
			
			if(s[i] > 0 && sub > min)
				 break;
		
			if(s[i] < 0){
			int k = j;
			
			 j = binarySearch(s,k+2,num-1,n,i);
			 sub = abs(target-(s[i]+s[j]));
			 
			if(i >= j)
				continue;

			if(min > sub){
				min = sub;
				cnt = 1;
			}
			else if(min == sub && k!=j)
				cnt++;
			}
		
			 
			
			}
			
		
		
		std::cout<<cnt<<std::endl;
				
	}
}

int binarySearch(int a[], int left, int right, int value,int i)
{
	int mid;
	if (left > right){
		 if((abs(value-a[left]) < abs(value-a[right])))
			 return left;
		else
			 return right;
	}


	else
	{
		mid = (left+right)/2;
		if (a[mid] == value){
			if(mid != i)
				return mid;
			else{
				 if((abs(value-a[left]) <= abs(value-a[right])))
			  return left;
				else
			 return right;

			}
		}
		else if (a[mid] > value)
			return binarySearch(a, left, mid-1, value, i);
		else
			return binarySearch(a, mid+1, right, value, i);
	}
}