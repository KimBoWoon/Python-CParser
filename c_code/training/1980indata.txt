

#include <iostream>
#include <fstream>
#include <cstdlib>
int addWhat(int a, int b); 
void Qsort(int numbers[], int array_size); 
void part(int numbers[], int left, int right);

using namespace std;
int twoNumber[1000000]; 

int main()
{
	ifstream inStream;
	int ntc;

	inStream.open("input.txt");
	inStream >> ntc;
	for (int i = 0; i < ntc; i++)
	{
		int n=0, k=0, temp=0, value=10000001, count = 1, mim = 10000000; 
		inStream >> n >> k;
		int a = 0, b = n - 1;

		for (int i = 0; i < n; i++)
			inStream >> twoNumber[i]; 

		Qsort(twoNumber, n);

		while (a <b)
		{
			temp = twoNumber[a] + twoNumber[b]; 
			value = addWhat(temp, k); 
			if (value < mim) 
			{
				mim = value;
				count = 1;
			}
			else if (value == mim)
				count++;

			if (temp >= k) 
				b -= 1;
			else 
				a += 1;


		}

		cout << count << endl;
				
	}
	inStream.close();
	return 0;
}

int addWhat(int a, int b) 
{
	int that;
	that = a - b;
	if (that == 0)
		return 0;
	else if (that < 0)
		return -1 * that;
	else
		return that;
}

void Qsort(int numbers[], int array_size) 
{
	part(numbers, 0, array_size - 1);
}

void part(int numbers[], int low, int high) 
{
	if (low == high) return;
	int pivot, left, right;
	left = low;
	right = high;
	pivot = numbers[low];

	while (low < high)
	{
		while ((numbers[high] >= pivot) && (low < high))
			high--;

		if (low != high)
		{
			numbers[low] = numbers[high];
			low++;
		}

		while ((numbers[low] <= pivot) && (low < high))
			low++;

		if (low != high)
		{
			numbers[high] = numbers[low];
			high--;
		}
	}

	numbers[low] = pivot;
	pivot = low;
	low = left;
	high = right;

	if (low < pivot)
		part(numbers, low, pivot - 1);
	if (high > pivot)
		part(numbers, pivot + 1, high);
}