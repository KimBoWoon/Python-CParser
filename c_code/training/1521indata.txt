

#include <iostream>
#include <fstream>

using namespace std;


class Point
{
	
public:
	int x;
	int y;
	Point(){}
	Point(int x,int y){this->x=x; this->y=y;}

};


class Knight_Tour
{
	int m;
	int n;
	Point start;
	Point direction[8];
	int **board;
	int **path;
public:
	Knight_Tour(int m,int n,Point p);
    int tour_board(Point p,int count);
    void print_path();
	~Knight_Tour(){ for(int i=0; i<m; i++)delete[] board[i];  for(int i=0; i<m; i++) delete[] path[i]; delete[] board; delete path;}
};

Knight_Tour::Knight_Tour(int m,int n,Point p)
{	
	this->m=m;
	this->n=n;
	this->start=p;

	board=new int*[m];

	for(int i=0; i<m; i++)
		board[i]=new int[n]; 

	path=new int*[m];

	for(int i=0; i<m; i++)
		path[i]=new int[n];

	for(int i=0; i<m; i++)
		for(int j=0; j<n; j++)
			board[i][j]=0;

	board[start.y][start.x]=1;
	path[start.y][start.x]=1;	

	Point d[8]= {Point(1, -2), Point(2, -1), Point(2, 1), Point(1, 2),
                      Point(-1, 2), Point(-2, 1), Point(-2, -1), Point(-1, -2)};
    
    for(int i=0; i<8; i++){
    	direction[i].x=d[i].x;
    	direction[i].y=d[i].y;
    }

}


int Knight_Tour::tour_board(Point pos,int count)
{

	Point next;

	if (count == m * n)
        return 1;

    for(int i=0; i<8; i++)
    {

    	next.x = pos.x + direction[i].x;
   	    next.y = pos.y + direction[i].y;

   	    if ( next.x >= 0 && next.x <n && next.y >= 0 && next.y <m && board[next.y][next.x] == 0 )
	    {
	    	board[next.y][next.x] = 1;
	    	path[next.y][next.x]= count+1;

	        if ( tour_board(next,count+1) )
	            return 1;

	        board[next.y][next.x] = 0;
	    }

    }

    return 0;

}

void Knight_Tour::print_path()
{
	if(tour_board(start,1))
	{
		cout<<"1"<<endl;

		for(int i=0; i<m; i++)
			{ for(int j=0; j<n; j++)
				 cout<<path[i][j]<<" ";

				 cout<<endl;
				}

	}
	else
		cout<<"0"<<endl;

}


int main()
{

	ifstream file;
    
    file.open("input.txt");
    
    if(file.is_open()==false) 
        cout<<"입력파일이 없습니다."<<endl;
    
    else
    {
        int case_num;
        file>>case_num;
        
        for(int i=0; i<case_num; i++)
        {
        	int m,n;
        	file>>m>>n;

        	Point s;

        	file>>s.y>>s.x;

        	s.x=s.x-1;
        	s.y=s.y-1;

        	Knight_Tour kt(m,n,s);
        	kt.print_path();
        }

    }




}






