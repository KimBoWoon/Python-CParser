
#include<iostream>
#include<fstream>
using namespace std;

ifstream inFile("input.txt");

class Node{
private : 
	int s;
	int* fromL;
	int* fromU;
public : 
	Node(int size){
		s = size;
		fromL = new int[size];
		fromU = new int[size];
		for (int i = 0; i < s; i++){
			fromL[i] = -1;
			fromU[i] = -1;
		}
	}
	void setGas(int g){
		fromL[0] = g;
		fromU[0] = g;
	}
	void setFromLeft(Node* side, int cost){
		int* temp = new int[s];
		temp[0] = side->fromL[0] - cost;
		for (int i = 1; i < s; i++){
			if (side->fromL[i] > side->fromU[i-1]){
				temp[i] = side->fromL[i] - cost;
				continue;
			}
			temp[i] = side->fromU[i-1] - cost;
		}
		fromL = temp;
	}
	void setFromUp(Node* side, int cost){
		int* temp = new int[s];
		temp[0] = side->fromU[0] - cost;
		for (int i = 1; i < s; i++){
			if (side->fromU[i] > side->fromL[i - 1]){
				temp[i] = side->fromU[i] - cost;
				continue;
			}
			temp[i] = side->fromL[i - 1] - cost;
		}
		fromU = temp;
	}
	int print(){
		for (int i = 0; i < s; i++){
			if (fromL[i] >= 0 || fromU[i] >= 0){
				return i;
			}
		}
		return 0;
	}
	~Node(){
		delete[] fromL;
		delete[] fromU;
	}
};
class Map{
private:
	int row, col;
	int** rowCost;
	int** colCost;
	Node** nodes;
public:
	Map(int m, int n){
		row = m;
		col = n;
		rowCost = makeMap(m, n - 1);
		colCost = makeMap(m - 1, n);
		nodes = new Node*[n];
		for (int i = 0; i < n; i++){
			nodes[i] = new Node(m + n);
		}
	}
	void trip(int g){
		Node* zero = new Node(row + col);
		zero->setGas(0);
		nodes[0]->setGas(g);
		for (int i = 1; i < col; i++){
			nodes[i]->setFromUp(zero, 0);
			nodes[i]->setFromLeft(nodes[i - 1], rowCost[0][i - 1]);
		}
		for (int row = 1; row < this->row; row++){
			nodes[0]->setFromLeft(zero, 0);
			nodes[0]->setFromUp(nodes[0], colCost[row - 1][0]);
			for (int col = 1; col < this->col; col++){
				nodes[col]->setFromUp(nodes[col], colCost[row - 1][col]);
				nodes[col]->setFromLeft(nodes[col - 1], rowCost[row][col - 1]);
			}
		}
	}
	void print(int l){
		int p = nodes[col - 1]->print();
		if (p == 0){
			cout << -1 << endl;
			return;
		}
		cout << nodes[col - 1]->print() + (row + col - 2)*l << endl;
	}
	int** makeMap(int m, int n);
	~Map(){
		delete[] rowCost;
		delete[] colCost;
		delete[] nodes;
	}
};

int main(){
	int cases;
	inFile >> cases;
	while (cases--){
		int m, n, l, g;
		inFile >> m >> n >> l >> g;
		Map map(m, n);
		map.trip(g);
		map.print(l);
	}
	return 0;
}

int** Map::makeMap(int m, int n){
	int** map = new int*[m];
	for (int i = 0; i < m; i++){
		map[i] = new int[n];
		for (int j = 0; j < n; j++){
			inFile >> map[i][j];
		}
	}
	return map;
}