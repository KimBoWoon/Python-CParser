


#include <iostream>
#include <fstream>
#include <cstdlib>
using namespace std;

int run(char **Room, int row, int col, int *RSArr);						
void check(char **Room, int CurRow, int CurCol, int row, int col);		
void BBsort(int *RSArr, int Length);									

int roomSize = 0;	
int roomNum = 0;	

int main()
{
	ifstream inStream;
	int numTestCases;
	int j, k, l, n;

	inStream.open("input.txt");

	if (inStream.fail())
	{
		cerr << "Input file opening failed.\n";
		exit(1);
	}

	inStream >> numTestCases;

	for (int i = 0; i < numTestCases; i++)
	{
		int *RSArr;	
		RSArr = (int *)malloc(sizeof(int) * 100);
		int row, col;
		char **Room = NULL;
		roomNum = 0;

		inStream >> col >> row;

		Room = (char **)malloc(sizeof(char*) * row);		

		for (k = 0; k < row; k++)
		{
			Room[k] = (char *)malloc(sizeof(char) * (col));

			for (j = 0; j < col; j++)
			{
				inStream >> Room[k][j];		
			}
		}

		while (1)
		{
			if (!run(Room, row, col, RSArr))	
				break;
		}

		BBsort(RSArr, roomNum);
		cout << roomNum << endl;		

		for (l = 0; l < roomNum; l++)
		{
			cout << RSArr[l] << " ";	
		}
		cout << endl;

		for (n = 0; n < row; n++)
		{
			free(Room[n]);
		}
		free(Room);
		free(RSArr);
	}

	inStream.close();
	return 0;
}

int run(char **Room, int row, int col, int *RSArr)
{
	int i, j;
	int found = 0;
	int CurRow, CurCol;
	roomSize = 0;

	for (i = 1; i < row - 1; i++)
	{
		for (j = 1; j < col - 1; j++)
		{
			if (Room[i][j] == '.')
			{
				CurRow = i, CurCol = j;
				found = 1;
				break;
			}
		}
		if (found)
		{
			break;
		}
	}

	if (!found)
	{
		return 0;
	}

	check(Room, CurRow, CurCol, row, col);	

	roomNum++;
	RSArr[roomNum - 1] = roomSize;	
	return 1;
}

void check(char **Room, int CurRow, int CurCol, int row, int col)
{
	if (Room[CurRow][CurCol] == '.')
	{
		Room[CurRow][CurCol] = '#';
		roomSize++;
	}

	if (Room[CurRow - 1][CurCol] != '.' && Room[CurRow + 1][CurCol] != '.' && Room[CurRow][CurCol - 1] != '.' && Room[CurRow][CurCol + 1] != '.')
	{
		return;		
	}

	if (CurCol >= 2)
	{
		if (Room[CurRow][CurCol - 1] == '.')		
		{
			check(Room, CurRow, CurCol - 1, row, col);
		}
	}

	if (CurCol <= col - 2)
	{
		if (Room[CurRow][CurCol + 1] == '.')		
		{
			check(Room, CurRow, CurCol + 1, row, col);
		}
	}

	if (CurRow >= 2)
	{
		if (Room[CurRow - 1][CurCol] == '.')		
		{
			check(Room, CurRow - 1, CurCol, row, col);
		}
	}

	if (CurRow <= row - 2)
	{
		if (Room[CurRow + 1][CurCol] == '.')		
		{
			check(Room, CurRow + 1, CurCol, row, col);
		}
	}
}

void BBsort(int *RSArr, int Length)		
{
	int i = 0;
	int j = 0;
	int temp = 0;

	for (i = 0; i < (Length - 1); i++)
	{
		for (j = (Length - 1); j > i; j--)
		{
			if (RSArr[j] > RSArr[j - 1])
			{
				temp = RSArr[j - 1];
				RSArr[j - 1] = RSArr[j];
				RSArr[j] = temp;
			}
		}
	}
}