#include <stdio.h>

void permuteString(char *str, int begin, int end);
int factorial(int n);

int main()
{
	FILE* fp = fopen("input.txt", "r");
	int testCaseNumber = 0;
	int i = 0;
	int j = 0;
	int n = 0;
	int k = 0;
	char str[12] = { 0, };

	if (fp == NULL)
	{
		printf("file error\n");
	}

	fscanf(fp, "%d", &testCaseNumber);

	for (i = 0; i < testCaseNumber; i++)
	{
		fscanf(fp, "%d %d", &n, &k);
		for (j = 0; j < n; j++) {
			str[j] = 'a' + j;
		}
		str[n] = '\0';
		if (k == 1) { 
			printf("%s\n", str);
		}
		else
		{
			permuteString(str, n, k);
		}
	}
	fclose(fp);
	return 0;
}

void permuteString(char *str, int n, int k)
{
	int i = 0;
	int _k = 0;
	
	if (n == 2)	
	{
		k % 2 == 0 ? printf("%c%c\n", str[1], str[0])
			: printf("%c%c\n", str[0], str[1]);
	}
	else 
	{
		if (k % factorial(n - 1) == 0) {
			i = k / factorial(n - 1) - 1;
			_k = factorial(n - 1);
		} 
		else {
			i = k / factorial(n - 1);
			_k = k % factorial(n - 1);
		}

		printf("%c", str[i]); 

		while (str[i] != '\0') {
			str[i] = str[i + 1];
			i++;
		}	

		str[i - 1] = '\0';	

		permuteString(str, n - 1, _k);
	}
}

int factorial(int n)
{
	if (n <= 1)
	{	
		return 1;
	}
	else
	{	
		return n * factorial(n - 1);
	}
}