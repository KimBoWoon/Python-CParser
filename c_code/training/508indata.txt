 

 
#include <stdio.h>
#include <stdlib.h>

void recursive(int* arr,int begin,int n,long k,int size); 
void swap(int* a, int* b); 
long factorial(int n); 
int main()
{
    int test;
    FILE *fp;
    fp = fopen("input.txt","r"); 
    fscanf(fp,"%d",&test);
    while(test--)
    {
        int n,i;
        long k;
        int *arr;
        fscanf(fp,"%d %ld",&n,&k); 
        arr = (int*)malloc(sizeof(int)*n);
        for(i=0;i<n;i++) 
        {
            arr[i] = i; 
        }
        recursive(arr,0,n-1,k,n); 
        for(i=0;i<n;i++)
        {
            printf("%c",0x61+arr[i]); 
        }
        printf("\n");
        free(arr);
    }
    fclose(fp); 
    return 0;
}
void recursive(int* arr,int digit,int n,long k,int size)
{
    int fact_n = factorial(n);
    int i,j;
    if(k%fact_n == 0) 
    {
        if(k/fact_n == 0)
        {
            digit++;
        }
        else 
        {
            int u = (k/fact_n)-1;
            swap(&arr[u+digit],&arr[digit]);
            digit++;
        }
        for(i=digit;i<size-1;i++) 
        {
            for(j=digit;j<size-1;j++)
            {
                if(arr[j] < arr[j+1])
                {
                    int tmp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = tmp;
                }
            }
        }
    }
    else 
    {
        int tmp = (int)(k/fact_n)+digit;
        swap(&arr[digit],&arr[tmp]); 
        digit++;
        for(i=digit;i<size-1;i++) 
        {
            for(j=digit;j<size-1;j++)
            {
                if(arr[j] > arr[j+1])
                {
                    int tmp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = tmp;
                }
            }
        }
        recursive(arr,digit,n-1,k%fact_n,size);
    }
}
void swap(int* a, int* b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}
long factorial(int n)
{
    if(n==1 || n==0)
        return 1;
    else
        return n*(factorial(n-1));
}