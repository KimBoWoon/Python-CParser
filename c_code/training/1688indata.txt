#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

const int MAX = 111111;
const int INF = 987654321;

vector<int> V[MAX];

int main() {

	ifstream instream;
	int numTestCases;

	instream.open("input.txt");
	if(instream.fail()) {
		cerr << "Input file opening failed.\n";
		exit(1);
	}

	instream >> numTestCases; 

	for(int i=0; i<numTestCases; i++) {

		int cnt;
		instream >> cnt;

		for(int j=0; j<MAX; j++)
			V[j].clear();

		vector<pair<int, int> > points;
		vector<int> dir;

		for(int j=0; j<cnt; j++) {
			int x, y;
			instream >> x >> y;
			V[x].push_back(y);
		}

		int data;
		instream >> data;

		for(int j=0; j<MAX; j++)
			sort(V[j].begin(), V[j].end());

		int y=0;

		for(int j=0; j<MAX; j++) {

			if(V[j].empty()) {
				dir.push_back(0);
				continue;
			}
			if(V[j].front() == V[j].back()) {
				y = V[j].front();
				dir.push_back(1);
			} else if(V[j].front() == y) {
				y = V[j].back();
				dir.push_back(2);
			} else {
				y = V[j].front();
				dir.push_back(1);
			}
		}

		for(int j=0; j<MAX; j++) {
			if(dir[j] == 1) {
				for(int k=(int)V[j].size()-1; k>=0; k--) {
					points.push_back(make_pair(j, V[j][k]));
				}
			} else if(dir[j] == 2) {
				for(int k=0; k<V[j].size(); k++) {
					points.push_back(make_pair(j, V[j][k]));
				}
			}
		}

		for(int j=0; j<data; j++) {

			int num;
			instream >> num;

			num--;
			cout << points[num].first << " " << points[num].second << endl;
		}
	}
}

