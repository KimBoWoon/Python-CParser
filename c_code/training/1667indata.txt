
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct Point {
	int x;
	int y;
}point;

point pot[100000];

int compare(const void *a, const void *b) {
	point *ptrA = (point *)a;
	point *ptrB = (point *)b;
	if (ptrA->x < ptrB->x)
		return -1;
	else if (ptrA->x > ptrB->x)
		return 1;
	else if (ptrA->x == ptrB->x && ptrA->y < ptrB->y)
		return -1;
	else if (ptrA->x == ptrB->x && ptrA->y > ptrB->y)
		return 1;
	else
		return 0;
}

int compare2(const void *a, const void *b) {
	point *ptrA = (point *)a;
	point *ptrB = (point *)b;

	if (ptrA->y < ptrB->y)
		return 1;
	else if (ptrA->y > ptrB->y)
		return -1;
	else
		return 0;
}


int main() {
	FILE *infile;
	int i, testCase;
	infile = fopen("input.txt", "r");
	fscanf(infile, "%d", &testCase);

	for (i = 0; i<testCase; i++) {
		int number, j, k;
		int num, count = 1;
		fscanf(infile, "%d", &number);
		for (j = 0; j<number; j++) {
			int pot1, pot2;
			fscanf(infile, "%d %d", &pot1, &pot2);
			pot[j].x = pot1;
			pot[j].y = pot2;

		}
		qsort(pot, number, sizeof(pot[0]), compare);

		for (j = 0; j<number - 1; j++) {
			if (pot[0].y != 0) {
				for (k = j; k<number - 1; k++){
					if (pot[k].x == pot[k + 1].x)
						count++;
					else
						break;
				}
				qsort(pot+j, count, sizeof(pot[0]), compare2);
				count = 1;
				j = k;
			}

			else if ( (pot[j].x != pot[j + 1].x && pot[j].y != pot[j + 1].y)) {
				for (k = j + 1; k<number; k++) {
					if (pot[k].x == pot[k + 1].x)
						count++;
					else
						break;
				}
				qsort(pot+j+1, count, sizeof(pot[0]), compare2);
				count = 1;
				j = k;
			}
		}


		fscanf(infile, "%d", &num);

		for (j = 0; j<num; j++) {
			int a;
			fscanf(infile, "%d", &a);
			printf("%d %d\n", pot[a-1].x, pot[a-1].y);
		}


	}
	return 0;
}