#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdlib>

using namespace std;

int num = 0;
int Num[100] = { 0 };

void floodFill(char fig[101][102], int x, int y, char oldColor, char newColor);
int compare(const void * a, const void * b);

void floodFill(char fig[101][102], int x, int y, char oldColor, char newColor) {
	if (fig[x][y] != oldColor)
		return;
	else {
		fig[x][y] = newColor;
		++Num[num];
		floodFill(fig, x - 1, y, oldColor, newColor);
		floodFill(fig, x + 1, y, oldColor, newColor);
		floodFill(fig, x, y - 1, oldColor, newColor);
		floodFill(fig, x, y + 1, oldColor, newColor);
	}
}
int compare(const void * a, const void * b)
{
	return (*(int*)b - *(int*)a);
}

int main() {
	ifstream inStream;

	int numTestCases;
	int i, m, n, k;
	int M, N;

	char fig[101][102] = { 0, };

	inStream.open("input.txt");

	inStream >> numTestCases;

	for (i = 0; i < numTestCases; i++)
	{
		inStream >> M >> N;

		for (n = 0; n < 101; n++){
			for (m = 0; m < 102; m++){
				fig[n][m] = 0;
			}
		}

		for (n = 0; n < N; n++){
			for (m = 0; m < M; m++){
				inStream >> fig[n][m];
			}
		}
		for (n = 0; n < N; n++){
			for (m = 0; m < M; m++){
				if (fig[n][m] == '.'){
					floodFill(fig, n, m, '.', '+');
					++num;
				}
			}
		}
		qsort(Num, num, sizeof(int), compare);
		cout << num << endl;

		for (k = 0; k < num; k++){
			cout << Num[k];
			if (k < num - 1)
				cout << " ";
			else
				cout << endl;

		}
		for (k = 0; k < 100; k++){
			Num[k] = 0;
		}

		num = 0;
	}
	inStream.close();
	return 0;
}

