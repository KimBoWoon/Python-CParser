



#include <stdio.h>
#include <stdlib.h>

void swap(int arr[], int a, int b);
int partition(int arr[], int start, int end);
void QuickSort(int arr[], int start, int end);


int main() {

	FILE* infile;
	int i, j, numTestCases, numInteger, K, data;
	int first, last;
	int init, add, cnt;
	int min, min_l;
	int set[1000000] = {0};

	infile = fopen("input.txt", "r");
	if(infile == NULL)	exit(1);

	fscanf(infile, "%d", &numTestCases);

	for(i=0; i<numTestCases; i++) {

		fscanf(infile, "%d %d", &numInteger, &K);

		for(j=0; j<numInteger; j++) {

			fscanf(infile, "%d", &data);
			set[j] = data;
		}

		QuickSort(set,0,numInteger-1);			

		first = 1, cnt = 1, last = numInteger-1;
		
		init = set[0] + set[numInteger-1];
		min = abs(init - K);

		while(first != last) {

			add = set[first] + set[last];
			min_l = abs(add - K);

			if(min > min_l) {
				min = min_l;
				cnt = 0;
				cnt++;
			} else if(min == min_l) {
				cnt++;
			}

			if(set[first]+set[last] < K)
				first++;
			else 
				last--;
		}
		printf("%d\n", cnt);
	}
	fclose(infile);
}

void swap(int arr[], int a, int b) {

	int tmp = arr[a];
	arr[a] = arr[b];
	arr[b] = tmp;
}

int partition(int arr[], int start, int end) {

	int pivot = arr[start];
	int left = start + 1;
	int right = end;

	while(left <= right) { 

		while(pivot > arr[left])
			left++;

		while(pivot < arr[right])
			right--;

		if(left <= right)
			swap(arr,left,right);
	}

	swap(arr,start,right);
	return right;
}

void QuickSort(int arr[], int start, int end) {

	int pivot;

	if(start <= end) {

		pivot = partition(arr,start,end);
		QuickSort(arr,start,pivot-1);
		QuickSort(arr,pivot+1,end);
	}
}