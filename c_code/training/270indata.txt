#include <iostream>
#include <cstdlib>
#include <fstream>

typedef struct  dividednum
{
	int jisu;
	int sausu;
} DIVIDENUM;

void sumBunmo(int bunja_a, int bunmo_a, int bunja_b, int bunmo_b);
int lcm(int bunmo_a,int bunmo_b);
int gcd(int a, int b);
void soinsubunhae(int divison_num, DIVIDENUM *soinsubunhae, int diviednum, int &length);
int powers(int x, int n);

int main()
{
	std::fstream infile;
	int testcase;
	int bunja_a, bunmo_a;
	int bunja_b, bunmo_b;

	infile.open("input.txt");
	if (infile.fail())
	{
		std::cerr << "error";
		exit(1);
	}

	infile >> testcase;
	for (int i = 0; i < testcase; i++)
	{
		infile >> bunja_a >> bunmo_a >> bunja_b >> bunmo_b;
		sumBunmo(bunja_a, bunmo_a, bunja_b, bunmo_b);
	}
	return 0;
}

void sumBunmo(int bunja_a, int bunmo_a, int bunja_b, int bunmo_b)
{
	int lowvalue = lcm(bunmo_a, bunmo_b);
	int add_bunja = bunja_a * (lowvalue / bunmo_a) + bunja_b * (lowvalue / bunmo_b);
	int gcd_by_num = gcd(add_bunja, lowvalue);
	std::cout << add_bunja / gcd_by_num << " " << lowvalue / gcd_by_num << std::endl;
}
int lcm(int bunmo_a, int bunmo_b)
{
	DIVIDENUM soinsubunhae_a[10000] = { 0, };
	DIVIDENUM soinsubunhae_b[10000] = { 0, };
	int length_a = 0, length_b = 0;
	int diviednum = 2;
	soinsubunhae(bunmo_a, soinsubunhae_a, diviednum, length_a);
	diviednum = 2;
	soinsubunhae(bunmo_b, soinsubunhae_b, diviednum, length_b);
	int i=0, j=0;
	int returnnum = 1;
	while (length_a >= i && length_b>=j)
	{
		if (soinsubunhae_a[i].sausu == soinsubunhae_b[j].sausu)
		{
			int highjisu = (soinsubunhae_a[i].jisu >= soinsubunhae_b[j].jisu ? soinsubunhae_a[i].jisu : soinsubunhae_b[j].jisu);
			returnnum *= powers(soinsubunhae_a[i].sausu, highjisu);
			i++, j++;
		}
		else if (soinsubunhae_a[i].sausu > soinsubunhae_b[j].sausu)
		{
			returnnum *= powers(soinsubunhae_b[j].sausu, soinsubunhae_b[j].jisu);
			j++;
		}
		else
		{
			returnnum *= powers(soinsubunhae_a[i].sausu, soinsubunhae_a[i].jisu);
			i++;
		}
	}
	for (; length_a >= i; i++)
	{
		returnnum *= powers(soinsubunhae_a[i].sausu, soinsubunhae_a[i].jisu);
	}
	for (; length_b >= j; j++)
	{
		returnnum *= powers(soinsubunhae_b[j].sausu, soinsubunhae_b[j].jisu);
	}
	return returnnum;
}

void soinsubunhae(int divison_num, DIVIDENUM *soinsu_array, int diviednum, int &length)
{
	if (divison_num == 1) return;
	else
	{
		if (divison_num % diviednum == 0)
		{
			if (soinsu_array[length].sausu == 0)
			{
				soinsu_array[length].sausu = diviednum;
			}
			soinsu_array[length].jisu++;
			divison_num /= diviednum;
		}
		else
		{
			if (soinsu_array[length].sausu != 0) length++;
			diviednum++;
		}
	}
	soinsubunhae(divison_num, soinsu_array, diviednum, length);
}
int powers(int x, int n)
{
	if (n == 0) return 1;
	else return x*powers(x, n - 1);
}
int gcd(int a, int b)
{
	if (b == 0)
		return a;
	else
		return gcd(b, a%b);
}