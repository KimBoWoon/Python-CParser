
#include <iostream>
#include <fstream>
using namespace std;
int val[1000001];							
int K;	
void Swap(int arr[], int idx1, int idx2);
int Partition(int arr[], int left, int right);
void QuickSort(int arr[], int left, int right);
int isPositive(int posit_int);

int main()
{
	ifstream inFile("input.txt");
	if (inFile.fail()){
		return 0;
	}
	int testCases;									
	int S;											

	inFile >> testCases;							
	for (int i = 0; i < testCases; i++){
		S, K = 0;									
		inFile >> S >> K;						
		for (int j = 0; j < S; j++){				
			inFile >> val[j];						
		}

		QuickSort(val, 0, S - 1);
		int Kcnt = 0;								
		int Ncnt = 0;								
		int nearest;								
		int pairValue;								
		int absNearest;
		int start, end;

		start = 0;
		end = S - 1;
		pairValue = val[start] + val[end];
		absNearest = K - pairValue;

		while (1){
			if (start == end || start > end){
				if (Kcnt == 0){
					cout << Ncnt << endl;
					break;
				}
				else{
					cout << Kcnt << endl;
					break;
				}
			}
			else{
				int newPairValue = val[start] + val[end];
				int newNearest = K - newPairValue;
				if (newNearest > 0){
					start++;
					if (isPositive(newNearest) < isPositive(absNearest)){
						absNearest = newNearest;
						Ncnt = 1;
					}
					else if (isPositive(newNearest) == isPositive(absNearest)){
						Ncnt++;
					}

				}
				else if (newNearest < 0){
					end--;
					if (isPositive(newNearest) < isPositive(absNearest)){
						absNearest = newNearest;
						Ncnt = 1;
					}
					else if (isPositive(newNearest) == isPositive(absNearest)){
						Ncnt++;
					}
				}
				else if (newNearest == 0){
					start++;
					end--;
					Kcnt++;
				}
			}
		}

	}
	return 0;
}
void Swap(int arr[], int idx1, int idx2)
{
	int temp = arr[idx1];
	arr[idx1] = arr[idx2];
	arr[idx2] = temp;
}
int Partition(int arr[], int left, int right)
{
	int pivot = arr[left];
	int low = left + 1;
	int high = right;

	while (low <= high)
	{
		while (pivot>arr[low])
			low++;
		while (pivot<arr[high])
			high--;
		if (low <= high)
			Swap(arr, low, high);
	}
	Swap(arr, left, high);
	return high;
}
void QuickSort(int arr[], int left, int right)
{
	if (left <= right)
	{
		int pivot = Partition(arr, left, right);
		QuickSort(arr, left, pivot - 1);
		QuickSort(arr, pivot + 1, right);
	}
}
int isPositive(int posit_int)
{
	return posit_int >= 0 ? posit_int : -(posit_int);
}