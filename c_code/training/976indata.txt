
#include <stdio.h>

int gridX[101][101];
int gridY[101][101];
int grid[101][101][2][201];
void checkRoad(int m, int n, int l, int g);
void printResult(int m, int n, int l);

void main() {
	int numTestCase;
	int i, j, k, o;
	int m, n, l, g;
	FILE *f;
	f = fopen("input.txt", "r");
	fscanf(f, "%d", &numTestCase);

	for (i = 0; i < numTestCase; i++) {
		fscanf(f, "%d %d %d %d", &m, &n, &l, &g);
		for (j = 0; j < m; j++)
			for (k = 0; k < n - 1; k++)
				fscanf(f, "%d", &gridX[j][k]);
		for (j = 0; j < m - 1; j++)
			for (k = 0; k < n; k++)
				fscanf(f, "%d", &gridY[j][k]);
		for (j = 0; j < 100; j++) {
			for (k = 0; k < 100; k++) {
				for (o = 0; o < 200; o++) {
					grid[j][k][0][o] = 0;
					grid[j][k][1][o] = 0;
				}
			}
		}
		checkRoad(m, n, l, g);
		printResult(m, n, l);
	}
}

void checkRoad(int m, int n, int l, int g) {
	int h = 0;
	int i = 0;
	int j = 0;
	int k = 0;

	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			if (i == 0 && j == 0)
				continue;
			if (i == 0 | j == 0) {	
				if (i == 0)	
					grid[i][j][0][0] = grid[i][j - 1][0][0] + gridX[i][j - 1];
				else if (j == 0)	
					grid[i][j][1][0] = grid[i - 1][j][1][0] + gridY[i - 1][j];
				continue;
			}
			for (k = 1; k < i + j; k++) {	
				if (grid[i][j - 1][1][k - 1] != 0 | grid[i][j-1][0][k] != 0) {
					if (grid[i][j - 1][1][k - 1] == 0)
						grid[i][j][0][k] = grid[i][j - 1][0][k] + gridX[i][j - 1];
					else if (grid[i][j - 1][0][k] == 0)
						grid[i][j][0][k] = grid[i][j - 1][1][k - 1] + gridX[i][j - 1];
					else if (grid[i][j - 1][1][k - 1] <= grid[i][j - 1][0][k])
						grid[i][j][0][k] = grid[i][j - 1][1][k - 1] + gridX[i][j - 1];
					else
						grid[i][j][0][k] = grid[i][j - 1][0][k] + gridX[i][j - 1];
				}
				if (grid[i - 1][j][0][k - 1] != 0 | grid[i - 1][j][1][k] != 0) {
					if (grid[i - 1][j][0][k - 1] == 0)
						grid[i][j][1][k] = grid[i - 1][j][1][k] + gridY[i - 1][j];
					else if (grid[i - 1][j][1][k] == 0)
						grid[i][j][1][k] = grid[i - 1][j][0][k - 1] + gridY[i - 1][j];
					else if (grid[i - 1][j][0][k - 1] <= grid[i - 1][j][1][k])
						grid[i][j][1][k] = grid[i - 1][j][0][k - 1] + gridY[i - 1][j];
					else
						grid[i][j][1][k] = grid[i - 1][j][1][k] + gridY[i - 1][j];
				}
				if (grid[i][j][0][k] > g)	
					grid[i][j][0][k] = 0;
				if (grid[i][j][1][k] > g)
					grid[i][j][1][k] = 0;
			}
		}
	}
}

void printResult(int m, int n, int l) {
	int i = 0;
	for (i = 0; i < m + n; i++) {
		if (grid[m - 1][n - 1][0][i] != 0) {
			printf("%d\n", l * (m + n - 2) + i);
			break;
		}
		else if (grid[m - 1][n - 1][1][i] != 0) {
			printf("%d\n", l * (m + n - 2) + i);
			break;
		}
		if (i == m + n - 1)
			printf("-1\n");
	}
}