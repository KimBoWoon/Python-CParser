


#include <stdio.h>
#include <stdlib.h>

#define MAXSIZE 9

#define MARK 1
#define UNMARK 0
#pragma warning(disable:4996)

typedef struct Point { int x, y; } point;
point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 },
{ -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } }; 
int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];
int knightTour(int m, int n, point pos, int counter); 

int main()
{
	FILE *inFile;
	int NTS;
	inFile = fopen("input.txt", "r");
	fscanf(inFile, "%d", &NTS);

	int x, i, j, m, n, yvalue, xvalue;
	point start; 
	for (x = 0; x < NTS; x++)
	{
		fscanf(inFile, "%d %d", &m, &n);
		fscanf(inFile, "%d %d", &yvalue, &xvalue);
		start.y = yvalue, start.x = xvalue;

		for (i = 1; i <= m; i++)
		{
			for (j = 1; j <= n; j++)
				board[i][j] = UNMARK;
		}

		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1))
		{
			int a, b;
			printf("%d\n", 1);
			for (a = 1; a < m + 1; a++)
			{
				for (b = 1; b < n + 1; b++)
					printf("%d ", path[a][b]); 
				printf("\n");
			}
		}
		else
			printf("%d\n", 0);
	}
	return 0;
}

int knightTour(int m, int n, point pos, int counter)
{
	int i;
	point next;

	if (counter == m*n)
		return 1;

	for (i = 0; i < 8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y; 

		if (next.x > 0 && next.x <= n && next.y > 0 && next.y <= m &&
			board[next.y][next.x] != MARK) 
		{
			board[next.y][next.x] = MARK; 
			path[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter + 1))
				return 1;

			board[next.y][next.x] = UNMARK;
		}
	}
	return 0;
}