#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>

class TwoNums
{
private:
	int size;
	int* arr;
	int targetNum;
	int nearestIndex;
public:
	TwoNums(const int& s, const int& t, const int a[1000000]) :size(s), targetNum(t)
	{ 
		nearestIndex = findNearestIndex(a);
		arr = new int[size];
		memcpy(arr, a, size * sizeof(int));
	}
	int findNearestIndex(const int a[1000000])
	{
		int i = 0;
		for (i = 0; i < size; i++)
			if (a[i] >= targetNum)
				return i;
		return i - 1;
	}
	int findFair()
	{
		int leftIndex = nearestIndex-1;
		int rightIndex = nearestIndex;
		int count = 0;
		int nearestTarget = arr[leftIndex] + arr[rightIndex];
		int nearestTargetCount = 0;
		while (leftIndex > -1 && rightIndex < size)
		{
			int sum = arr[leftIndex] + arr[rightIndex];
			if (sum == targetNum)
			{
				count++;
				rightIndex++;
			}
			else if (sum > targetNum)
				leftIndex--;
			else
				rightIndex++;
			if (abs(targetNum - sum) == abs(targetNum - nearestTarget))
				nearestTargetCount++;
			else if (abs(targetNum - nearestTarget) > abs(targetNum - sum))
			{
				nearestTarget = sum;
				nearestTargetCount = 1;
			}
		}

		if (leftIndex < 0) leftIndex = 1;
		if (rightIndex > size - 1) rightIndex--;
		int copyLeftIndex = leftIndex - 1;
		while (copyLeftIndex > -1 && leftIndex != rightIndex)
		{
			int sum = arr[copyLeftIndex] + arr[rightIndex];
			if (abs(targetNum - sum) == abs(targetNum - nearestTarget))
				nearestTargetCount++;
			copyLeftIndex--;
		}
		int copyRightIndex = rightIndex+1;
		while (copyRightIndex < size && leftIndex != rightIndex)
		{
			int sum = arr[leftIndex] + arr[copyRightIndex];
			if (abs(targetNum - sum) == abs(targetNum - nearestTarget))
				nearestTargetCount++;
			copyRightIndex++;
		}
		return count != 0 ? count : nearestTargetCount;
	}
	~TwoNums()
	{
		delete[] arr;
	}
};

int compare(const void* a, const void* b)
{
	return (*(int*)a - *(int*)b);
}

int main()
{
	std::ifstream input;
	input.open("input.txt");
	if (input.fail())
	{
		std::cerr << "file open err" << std::endl;
		return 0;
	}

	int numOfCase;
	input >> numOfCase;
	for (int i = 0; i < numOfCase; i++)
	{
		int size;
		input >> size;
		int target;
		input >> target;
		int* a = new int[1000000];
		for (int j = 0; j < size; j++)
			input >> a[j];
		qsort(a, size, sizeof(int), compare);
		TwoNums t(size, target, a);
		std::cout << t.findFair() << std::endl;
		delete[] a;
	}

	return 0;
}
