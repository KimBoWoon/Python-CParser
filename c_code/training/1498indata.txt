
#include <iostream>
#include <fstream>
using namespace std;

#define MARK 1
#define UNMARK 0

typedef struct Point{ int x, y; }point;

point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 },
{ -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } };

int knightTour(int m, int n, point pos, int counter, int** board, int** path){
	point next;

	if (counter == m*n)
		return 1;

	for (int i = 0; i < 8; i++){
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if (next.x>0 && next.x <= n && next.y > 0 && next.y <= m && board[next.y][next.x] != MARK){
			board[next.y][next.x] = MARK;
			path[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter + 1, board, path))
				return 1;

			board[next.y][next.x] = UNMARK;
		}
	}

	return 0;
}

void printTour(int** path, int m, int n){

	for (int i = 1; i <= m; i++){
		for (int j = 1; j <= n; j++){
			if (j != n)
				cout << path[i][j] << " ";
			else
				cout << path[i][j];
		}
		cout << endl;
	}
}

int main(){

	int caseNum = 0;

	ifstream inputFile("input.txt");

	inputFile >> caseNum;
	for (int i = 0; i < caseNum; i++){
		int** board;
		int** path;
		int m, n;
		point start;
		inputFile >> m >> n >> start.y >> start.x;

		board = new int*[m + 1];
		path = new int*[m + 1];
		for (int i = 0; i <= m; i++){
			board[i] = new int[n + 1];
			path[i] = new int[n + 1];
		}

		for (int i = 1; i <= m; i++)
			for (int j = 1; j <= n; j++)
				board[i][j] = UNMARK;

		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1, board, path)){
			cout << 1 << endl;
			printTour(path, m, n);
		}
		else
			cout << 0 << endl;

		for (int i = 0; i <= m; i++){
			delete[] board[i];
			delete[] path[i];
		}

		delete board;
		delete path;
	}
}