

#include <iostream>
#include <fstream>

#define MAX_GAS 1000000
#define NOT_WAY 1001
 

using namespace std;

class Gas    
{
    int right,low;
public:
    void setRight(int right){this->right=right;}
    void setLow(int low){this->low=low;}
    int getRight(){return right;}
    int getLow(){return low;}
};

class Status
{
    
    int start_point[2]; 
    int end_point[2]; 
    int arrival[2][198]; 
public:
    Status();
    int getStart_point(int d){ return start_point[d];}
    int getEnd_point(int d){ return end_point[d];}
    void new_arrival(int direction,int turn,int total_gas);
    int getArrival_Gas(int d,int turn) { return arrival[d][turn];}
};

Status::Status()
{
    start_point[0]=start_point[1]=198; 
    end_point[0]=end_point[1]=0; 

    for(int i=0; i<2; i++) for(int j=0; j<197; j++) arrival[i][j]=MAX_GAS;
}

void Status::new_arrival(int direction,int turn,int total_gas)
{
    if(arrival[direction][turn] > total_gas)
    {
        if(turn<start_point[direction])
            start_point[direction]=turn;

        if(turn>end_point[direction])
            end_point[direction]=turn;

        arrival[direction][turn]=total_gas;
    }
}

class Driving_License 
{
    int m,n,l,g;
    Gas **map;
    Status** map_status;
public:
    Driving_License(int m,int n,int l,int g);
    void inputMap(ifstream *file);
    void driving_road();
    ~Driving_License();
};
Driving_License::Driving_License(int m,int n,int l,int g)
{
    this->m=m; this->n=n; this->l=l; this->g=g;
    map=new Gas*[m];

    for(int i=0; i<m; i++)
        map[i]=new Gas[n];

    map_status=new Status*[m];

    for(int i=0; i<m; i++)
        map_status[i]=new Status[n];

      map_status[0][0].new_arrival(1,0,0); 
      map_status[0][0].new_arrival(0,0,0);
}
void Driving_License::inputMap(ifstream* file)
{    
    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
        {
            if(j==n-1)
                map[i][j].setRight(NOT_WAY);
            else
            {
                int num;
                *file>>num;
                map[i][j].setRight(num);
            }
        }
    }
    
    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
        {
            if(i==m-1)
                map[i][j].setLow(NOT_WAY);
            else
            {
                int num;
                *file>>num;
                map[i][j].setLow(num);
            }
        }
    }


}
void Driving_License::driving_road()
{
    for(int i=0; i<m; i++)
    {

        for(int j=0; j<n; j++)
        {

            if(i==m-1 & j==n-1)
            {
                int turn_right = map_status[i][j].getStart_point(0);
                int turn_low = map_status[i][j].getStart_point(1);
                int best= turn_right > turn_low ? turn_low : turn_right;
                
                if(best==198)
                    cout<<-1<<endl;
                else
                    cout<<(n+m-2)*l + best<<endl;
            }


            for(int k=0; k<2; k++)
            {  

                int case_start=map_status[i][j].getStart_point(k);
                int case_end=map_status[i][j].getEnd_point(k);


                if(j<n-1) 
                {
                    for(int c=case_start; c<=case_end; c++)
                       { int next_gas=map_status[i][j].getArrival_Gas(k,c)+map[i][j].getRight();
                        if( next_gas <= g )
                            map_status[i][j+1].new_arrival(0,c+k,next_gas);
                    }
                }

                if(i<m-1) 
                {   
                    int t= (k==0) ? 1:0 ;

                    for(int c=case_start; c<=case_end; c++)
                        {    int next_gas=map_status[i][j].getArrival_Gas(k,c)+map[i][j].getLow();
                            if( next_gas <= g )
                            map_status[i+1][j].new_arrival(1,c+t,next_gas);
                        }
                }


            }


        }

    }

}

 
Driving_License::~Driving_License()
{
    for(int i=0; i<m; i++)
        {delete[] map[i]; delete[] map_status[i];}

    delete[] map;
    delete[] map_status;
}


int main()
{
    ifstream file;
    
    file.open("input.txt");
    
    if(file.is_open()==false) 
        cout<<"입력파일이 없습니다."<<endl;
    
    else
    {	
        int case_num;
        file>>case_num;
        
        for(int i=0; i<case_num; i++)
        {	
            int m,n,l,g;
            file>>m>>n>>l>>g;
            Driving_License driving(m,n,l,g);
            driving.inputMap(&file);
            driving.driving_road();
            
        }
    }

        file.close();


}