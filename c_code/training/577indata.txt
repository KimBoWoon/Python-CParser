#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STRS 1000

#define true 1
#define false 0

#define MAX_LEN 13

typedef int boolean;

void permute(char* str, int begin, int end, unsigned long k, boolean* isFinished);
int compare (const void* a, const void* b);
int factorial(int n);

void main()
{
	FILE* fileDes = NULL;				
	int trialNum;						

	char basis[MAX_LEN] = "abcdefghijkl";	
	char alphabets[MAX_LEN] = {0, };		

	int numOfAlphabet;					
	unsigned long k;								
	int i = 0;							
	int j = 0;
	
	int strCnt;						
	boolean isFinished;				



	fileDes = fopen("input.txt", "r");

	if(fileDes == NULL)
		exit(1);

	fscanf(fileDes, "%d", &trialNum);

	for(i = 0; i < trialNum; i++)
	{
		fscanf(fileDes, "%d %lu", &numOfAlphabet, &k);

		strCnt = 1; isFinished = false;

		strncpy(alphabets, basis, numOfAlphabet);
		alphabets[numOfAlphabet] = '\0';

		permute(alphabets, 0, strlen(alphabets), k, &isFinished);
	}

	fclose(fileDes);
}

void permute(char* str, int begin, int end, unsigned long k, boolean* isFinished)
{
	int i, j;
	int range = end - begin;			


	char temp_str[MAX_LEN] = {0,};		
	char temp;							

	if((*isFinished)) return;

	strcpy(temp_str, str);
	
	qsort(str + begin, range, sizeof(char), compare);


	if(range == 1)
	{
		printf("%s\n", str);
		(*isFinished) = true;
	}

	else
	{
		int partNum = factorial(end - begin) / (end - begin);

		int partIdx = ((k-1)/partNum);

		k = k - (partNum * (partIdx));


		temp = str[begin]; str[begin] = str[begin+partIdx]; str[begin+partIdx] = temp;
		permute(str, begin+1, end, k, isFinished);
		temp = str[begin]; str[begin] = str[begin+partIdx]; str[begin+partIdx] = temp;




	}

	strcpy(str, temp_str);
}

int compare (const void* a, const void* b)
{
	return ((*(char*)a) - (*(char*)b));
}

int factorial(int n)
{
	if(n == 0)
		return 1;

	else
		return (n*(factorial(n-1)));
}