
#include <stdio.h>
#include <stdlib.h>

typedef struct Point {
   int x;
   int y;
}point;

point p[100000];

int sort(const void *a, const void *b) {
   point *ptrA = (point *)a;
   point *ptrB = (point *)b;
   if (ptrA->x < ptrB->x)
      return -1;
   else if (ptrA->x > ptrB->x)
      return 1;
   else if (ptrA->y < ptrB->y)
      return -1;
   else if (ptrA->y > ptrB->y)
      return 1;
   else
      return 0;
}

int sortY(const void *a, const void *b) {
   point *ptrA = (point *)a;
   point *ptrB = (point *)b;

   if (ptrA->y < ptrB->y)
      return 1;
   else if (ptrA->y > ptrB->y)
      return -1;
   else
      return 0;
}
void monotone(int j,int numOfLoad)
{
	int k;
	int count=1;
	if (p[0].y != 0) {
            for (k = j; k<numOfLoad - 1; k++){
               if (p[k].x == p[k + 1].x)
                  count++;
               else
                  break;
            }
            qsort(&p[j], count, sizeof(p[0]),  sortY);
            count = 1;
            j = k;
         }
         else if ((p[j].x != p[j + 1].x && p[j].y != p[j + 1].y)) {
            for (k = j + 1; k<numOfLoad; k++) {
               if (p[k].x == p[k + 1].x)
                  count++;
               else
                  break;
            }
			qsort(&p[j+1], count, sizeof(p[0]), sortY);
            count = 1;
            j = k;
         }
}

int main() {
   FILE *infile;
   int i, numCase;
   infile = fopen("input.txt", "r");
   fscanf(infile, "%d", &numCase);

   for (i = 0; i<numCase; i++) {
      int numOfLoad, j;
      int numOfoutput;
	  int count = 1;
      fscanf(infile, "%d", &numOfLoad);
      for (j = 0; j<numOfLoad; j++) {
         fscanf(infile, "%d %d", &p[j].x, &p[j].y);
      }
      qsort(p, numOfLoad, sizeof(p[0]), sort);
      for (j = 0; j<numOfLoad - 1; j++) {
         monotone(j,numOfLoad);
      }
      fscanf(infile, "%d", &numOfoutput);
      for (j = 0; j<numOfoutput; j++) {
         int k;
         fscanf(infile, "%d", &k);
         printf("%d %d\n", p[k-1].x, p[k-1].y);
      }

   }
   return 0;
}