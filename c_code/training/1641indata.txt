

#include<iostream>
#include<fstream>
#include<cstdlib>
using namespace std;

struct Point{
	int x;
	int y;
};

int cmp(const void* a, const void* b) {
	Point* pa = (Point*)a;
	Point* pb = (Point*)b;
	if (pa->x > pb->x)
		return 1;
	else if (pa->x < pb->x)
		return -1;
	else{
		if (pa->y > pb->y)
			return 1;
		else if (pa->y < pb->y)
			return -1;
		else
			return 0;
	}
}

int cmp2(const void* a, const void* b) {
	Point* pa = (Point*)a;
	Point* pb = (Point*)b;
	if (pa->y < pb->y)
		return 1;
	else if (pa->y > pb->y)
		return -1;
	else
		return 0;
}

void searchPoint(Point* arr, int size){
	int partSize = 0;
	int index = 0;
	while (index < size - 1){
		if (index == 0 && arr[index].y < 0){
			while (arr[index].x == 0 && index < size){
				partSize++;
				index++;
			}
			qsort(&arr[index - partSize], partSize, sizeof(Point), cmp2);
			partSize = 0;
			index--;
		}
		else if (arr[index].x != arr[index + 1].x && arr[index].y != arr[index + 1].y){
			int temp = arr[index].y;
			index++;
			while (temp != arr[index].y){
				partSize++;
				index++;
			}
			qsort(&arr[index - partSize], partSize + 1, sizeof(Point), cmp2);
			partSize = 0;
			continue;
		}
		else
			index++;
	}
}

int main(){
	ifstream File;
	int numCase = 0;
	int numIndex = 0;
	int size = 0, num = 0;
	Point* arr = NULL;

	File.open("input.txt");
	File >> numCase;
	for (int iter = 0; iter < numCase; iter++){
		File >> size;
		arr = new Point[size];
		for (int i = 0; i < size; i++){
			File >> arr[i].x >> arr[i].y;
		}
		qsort(arr, size, sizeof(Point), cmp);
		searchPoint(arr, size);

		File >> numIndex;
		for (int i = 0; i < numIndex; i++){
			int index = 0;
			File >> index;
			index--;
			cout << arr[index].x << ' ' << arr[index].y << endl;
		}
		delete[] arr;
	}
	File.close();
	return 0;
}