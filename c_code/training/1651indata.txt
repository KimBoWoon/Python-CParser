#include <stdio.h>
#include <stdlib.h>
typedef struct Walkway { int x, y;} walking;

int sw = 0; 

int compare(const void *first,const void *second)
{
	if (sw == 0) 
		return ((*(int*)first) - (*(int*)second));
	else 
		return -((*(int*)first) - (*(int*)second));
}

walking * cmp(const void *first,const void *second)
{
	return ((*(walking*)first).x - (*(walking*)second).x);
}

int main()
{
	FILE * fp;
	fp = fopen("input.txt", "r");
	if (!fp) abort(); 
	int testcase = 0, path = 0, i, j, k, q = 0, cnt = 0, pivot = 0, temp = 0;
	int num = 0, *arr = NULL, *arrY = NULL;
	fscanf(fp,"%d",&testcase);
	
	while (testcase--)
	{
		fscanf(fp,"%d",&path); 
		walking * way = (walking*)malloc(sizeof(walking)*path); 
		for (i = 0;i < path;i++)
			fscanf(fp,"%d%d",&way[i].x,&way[i].y);
		fscanf(fp,"%d",&num); 
		arr = (int*)malloc(sizeof(int)*num); 
		for (i = 0; i < num; i++)
			fscanf(fp,"%d",&arr[i]);
		qsort(way,path,sizeof(walking),cmp);
		arrY = (int*)malloc(sizeof(int)*path);
		temp = way[0].x; 
		cnt = 0;
		pivot = 0;

		
		for (i = 0;i < path;i++)
		{
			if (temp == way[i].x)
			{
				arrY[i] = way[i].y;
				cnt++;
				continue;
			}
			else if (cnt == 1)
			{
				temp = way[i].x; 
				arrY[i] = way[i].y;
				cnt = 1;
				pivot = i; 
				continue;
			}
			else if (((way[i].x == 2) && (way[1].x == 0 && way[1].y > 0)) || (arrY[i - 1] >= arrY[i - cnt - 1] && arrY[i - 2] >= arrY[i - cnt - 1])) 
			{
				sw = 0;
				qsort(arrY+pivot,cnt,sizeof(int),compare);
				temp = way[i].x;
				arrY[i] = way[i].y;
				cnt = 1;
				pivot = i; 
			}
			else if (((way[i].x == 2) && (way[1].x == 0 && way[1].y < 0)) || (arrY[i - 1] <= arrY[i - cnt - 1] && arrY[i - 2] <= arrY[i - cnt - 1])) 
			{
				sw = 1;
				qsort(arrY + pivot, cnt, sizeof(int), compare);
				temp = way[i].x;
				arrY[i] = way[i].y;
				cnt = 1;
				pivot = i; 
			}
		}
		
		if (cnt >=2 && (arrY[pivot - 1] <= arrY[path - 1]) && (arrY[pivot - 1] <= arrY[path - 2]))
		{
			sw = 0;
			qsort(arrY + pivot, cnt, sizeof(int), compare);
		}
		else if (cnt >= 2)
		{
			sw = 1;
			qsort(arrY + pivot, cnt, sizeof(int), compare);
		}
		
		for (i = 0; i < num; i++) printf("%d %d\n", way[arr[i] - 1].x, arrY[arr[i] - 1]);
		free(way);
		free(arr);
		free(arrY);
	}
	return 0;
}