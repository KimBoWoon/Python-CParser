#include <stdio.h>
#include <stdlib.h>

#pragma warning(disable:4996)
#define MAXSIZE 9
#define MARK 1
#define UNMARK 0

typedef struct Point {
	int x, y;
}point;

point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 },	
					{ -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } };	
int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE];

int knightTour(int m, int n, point pos, int counter);
void printTour(m, n);

void main() {
	int numCases;
	int i, j, k, m, n;
	point start;
	FILE *f;

	f = fopen("input.txt", "r");
	fscanf(f, "%d", &numCases);

	for (i = 0; i < numCases; i++) {

		fscanf(f, "%d %d", &m, &n);
		for (j = 1; j < m+1; j++)
			for (k = 1; k < n+1; k++)
				board[j][k] = UNMARK;
		fscanf(f, "%d %d", &start.y, &start.x);
		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;

		if (knightTour(m, n, start, 1))
			printTour(m, n);
		else
			printf("0\n");
	}
}

int knightTour(int m, int n, point pos, int counter) {
	int i;
	point next;

	if (counter == m*n)	
		return 1;

	for (i = 0; i < 8; i++) {	
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;

		if (next.x > 0 && next.x <= n &&
			next.y > 0 && next.y <= m &&
			board[next.y][next.x] != MARK)	
		{
			board[next.y][next.x] = MARK;	
			path[next.y][next.x] = counter + 1;

			if (knightTour(m, n, next, counter + 1))	
				return 1;

			board[next.y][next.x]= UNMARK;	
		}
	}
	return 0;
}

void printTour(m, n) {
	int i, j;

	printf("1\n");
	for (i = 1; i < m+1; i++) {
		for (j = 1; j < n+1; j++) {
			printf("%2d ", path[i][j]);
		}
		printf("\n");
	}
	
}