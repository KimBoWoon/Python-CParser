#include<iostream>
#include<fstream>
#include <algorithm>

#define SIZE 1000

int cnt=0;

using namespace std;

void floodFill(char fig[][SIZE + 1], int x, int y, char oldColor, char newColor){
	
	if (fig[x][y] != oldColor){
		return;
	}
	else
	{
		cnt++;
		fig[x][y] = newColor;

		floodFill(fig, x - 1, y, oldColor, newColor);
		floodFill(fig, x + 1, y, oldColor, newColor);
		floodFill(fig, x, y - 1, oldColor, newColor);
		floodFill(fig, x, y + 1, oldColor, newColor);
	}
	return;
}
void printMap(char fig[][SIZE + 1], int x, int y){
	cout << endl;
	for (int i = 0; i < y; i++){
		for (int j = 0; j < x; j++){
			cout << fig[i][j];
		}cout << endl;
	}cout << endl; cout << endl;
}
int main()
{
	int testCase;
	int x,y;
	char fig[SIZE][SIZE + 1];

	ifstream file;
	file.open("input.txt");

	file >> testCase;
	for (int tCase = 0; tCase < testCase; tCase++){

		int result[SIZE] = {};
		int roomNum = 0;
		file >> x >> y;
		
		for (int i = 0; i < y; i++){
			for (int j = 0; j < x; j++){
				file >> fig[i][j];
			}
		}
		for (int i = 1; i < y-1; i++){
			for (int j = 1; j < x-1; j++){

				if (fig[i][j] == '.'){
					cnt = 0;
					floodFill(fig, i, j, '.', '+');
					result[roomNum++] = cnt;


				}
			}
		}

		sort(result, result + roomNum);
		cout << roomNum << endl;
		for (int k = roomNum-1; k >= 0; k--)
			cout << result[k] << " ";
		cout << endl;
		
	}

	return 0;
}