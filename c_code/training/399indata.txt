
#include <iostream>
#include <fstream>
#include <list>
#include <functional>

const int MAX_SIZE = 102;

using namespace std;

int dfs(int map[][MAX_SIZE], int i, int j);

int main(void) {
	ifstream in("input.txt");

	int t;

	in >> t;

	for (int testcase = 0; testcase < t; testcase++) {
		int n, m;

		in >> m >> n;

		int map[MAX_SIZE][MAX_SIZE] = { 0 };

		for (int i = 1; i <= n; i++) {
			map[i][0] = map[i][m + 1] = -1;
		}

		for (int i = 1; i <= m; i++) {
			map[0][i] = map[n + 1][i] = -1;
		}

		for (int i = 1; i <= n; i++) {
			char inp[MAX_SIZE] = { 0 };

			in >> inp;

			for (int j = 1; j <= m; j++) {
				map[i][j] = (inp[j - 1] == '+') ? -1 : 0;
			}
		}

		list<int> roomSizes;

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (map[i][j] == 0) {
					roomSizes.push_back(dfs(map, i, j));
				}
			}
		}
		roomSizes.sort(greater<int>());

		cout << roomSizes.size() << endl;
		for (list<int>::iterator i = roomSizes.begin(); i != roomSizes.end(); i++) {
			cout << *i << " ";
		}
		cout << endl;
	}

	return 0;
}

int dfs(int map[][MAX_SIZE], int i, int j) {
	if (map[i][j] == -1) {
		return 0;
	}
	else {
		map[i][j] = -1;	

		return	  dfs(map, i + 1, j) 
				+ dfs(map, i - 1, j) 
				+ dfs(map, i, j + 1) 
				+ dfs(map, i, j - 1) 
				+ 1;
	}
}