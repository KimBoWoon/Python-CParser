#include <stdio.h>
#include <stdlib.h>

void eurekaCheck(int* triNums, int K);
void comb_reputation(int* got, int n_chosen, int needed, int at, int max, int* triNums, int K);

#define true 1
#define false 0
#define MAX_VALUE 1000

int has3tri;

void main()
{
	FILE* fileDes = NULL;			
	int trialNum;					
	int K;							
	int accumlated = 0;				

	int i = 0;							



	int triNums[MAX_VALUE] = {0, };

	while(1)
	{
		triNums[i] = accumlated + (i + 1);

		if(triNums[i] >= MAX_VALUE)
		{
			i--;
			break;
		}

		accumlated = triNums[i];
		i++;		
	}



	fileDes = fopen("input.txt", "r");

	if(fileDes == NULL)
		exit(1);

	fscanf(fileDes, "%d", &trialNum);

	for(i = 0; i < trialNum; i++)
	{
		has3tri = false;

		fscanf(fileDes, "%d", &K);
		eurekaCheck(triNums ,K);

		printf("%d\n", (has3tri == true)? 1 : 0);
	}

	fclose(fileDes);
}

void eurekaCheck(int* triNums, int K)
{
	int i = 0;

	int chosen[MAX_VALUE];

	while(triNums[i] != 0)
	{
		if(triNums[i] >= K) {
			i--;
			break;
		}

		i++;
	}

	
	comb_reputation(chosen, 0, 3, 0, i, triNums, K);


}

void comb_reputation(int* got, int n_chosen, int needed, int at, int max, int* triNums, int K)
{
	int i;

	if(has3tri == true) return;

	if (n_chosen == needed) 
	{
		if(K == (triNums[got[0]] + triNums[got[1]] + triNums[got[2]]))
		{
			has3tri = true;
			return;
		}

		return;

	}
 
	for (i = at; i <= max; i++) 
	{
		if (got) got[n_chosen] = i;

		comb_reputation(got, n_chosen + 1, needed, i, max, triNums, K);
	}

	return;
}