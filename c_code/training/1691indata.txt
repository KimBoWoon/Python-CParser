#include <iostream>
#include <fstream>
#include <cstdlib>
using namespace std;

typedef struct _monotone {
	int x, y;
}Monotone;

int compare(const void *a, const void *b) {
	int _a = ((Monotone *)a)->x;
	int _b = ((Monotone *)b)->x;
	if (_a != _b)
		return _a - _b;
	return ((Monotone *)a)->y - ((Monotone *)b)->y;
}

int compare_re(const void *a, const void *b) {
	int _a = ((Monotone *)a)->y;
	int _b = ((Monotone *)b)->y;
	return _b - _a;
}

int main() {
	fstream file;
	file.open("input.txt");

	int cases;
	file >> cases;
	while (cases--) {
		int size;
		file >> size;
		Monotone *mono = (Monotone*)malloc(sizeof(Monotone) * size);
		for (int i = 0; i < size; i++)
			file >> mono[i].x >> mono[i].y;

		qsort(mono, size, sizeof(Monotone), compare);

		int temp = mono[0].x;
		bool same = false;
		int start = 0;

		for (int i = 1; i < size; i++){
			if (temp != mono[i].x){
				temp = mono[i].x;
				if (same){
					qsort(&mono[start], i - start, sizeof(Monotone), compare_re);
					same = false;
				}
				start = i;
				if (mono[i - 1].y != mono[i].y){
					same = true;
				}
			}

		}
		if (same){
			qsort(&mono[start], size - start, sizeof(Monotone), compare_re);
			same = false;
		}
		int zero_count = 1;
		if (mono[0].y != 0){
			for (int i = 1; i < size; i++){
				if (mono[i].x != 0)	break;
				zero_count++;
			}

			qsort(&mono[0], zero_count, sizeof(Monotone), compare_re);
		}
		int print_size;
		file >> print_size;
		for (int i = 0; i < print_size; i++){
			int num;
			file >> num;
			cout << mono[num - 1].x << " " << mono[num - 1].y << endl;
		}
	}


	return 0;
}