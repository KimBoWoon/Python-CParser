

#include <stdio.h>
#include <string.h>

#define MAXSIZE 9 
#define MARK 1 
#define UNMARK 0 

typedef struct Point { int x, y; } point; 
point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 }, { -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } }; 

int board[MAXSIZE][MAXSIZE], path[MAXSIZE][MAXSIZE]; 

int knightTour(int m, int n, point pos, int counter) 
{
	int i;
	point next; 

	if (m*n == counter) return 1; 

	for (i = 0; i < 8; i++) 
	{
		
		next.x = pos.x + direction[i].x; 
		next.y = pos.y + direction[i].y;

		
		if (next.x > 0 && next.x <= n && next.y > 0 && next.y <= m && board[next.y][next.x] != MARK)
		{
			board[next.y][next.x] = MARK; 
			path[next.y][next.x] = counter + 1; 
			if (knightTour(m, n, next, counter + 1)) return 1; 
			board[next.y][next.x] = UNMARK; 
		}
	}
	return 0; 
}
int checkPath(int m, int n) 
{
	int i, j,k, l, temp ;
	for (i = 1; i <= m; i++){
		for (j = 1; j <= n; j++)
		{
			temp = path[i][j];
			if (!temp) return 0; 
			for (k = 1; k <= m; k++){ 
				for (l = 1; l <= n; l++){
					if (i == k && j == l) continue;
					if (temp == path[k][l]) return 0;
				}
			}
		}
	}
	return 1; 
}

void printTour(int m, int n) 
{
	int i, j;
	printf("1\n");
	for (i = 1; i <= m; i++)
	{
		for (j = 1; j <= n; j++) printf("%d ", path[i][j]); 
		printf("\n");
	}
}

int main()
{
	FILE *fp; 
	int t, m, n, i; 
	point start; 
	fp = fopen("input.txt", "r"); 
	if (fp == NULL) return -1; 
	fscanf(fp, "%d", &t); 
	while (t--) 
	{
		fscanf(fp, "%d %d %d %d", &m, &n, &start.y, &start.x); 
		memset(board, 0, sizeof(int)*(MAXSIZE*MAXSIZE)); 
		memset(path, 0, sizeof(int)*(MAXSIZE*MAXSIZE)); 
		board[start.y][start.x] = MARK; 
		path[start.y][start.x] = 1; 

		knightTour(m, n, start, 1); 

		if(checkPath(m,n)) printTour(m, n); 
		else printf("0\n"); 
	}
	fclose(fp); 
	return 0; 
}