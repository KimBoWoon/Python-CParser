#include <stdio.h>
#include <stdlib.h>
#define MARK 1
#define UNMARK 0
typedef struct Point {int x, y;} point;
point direction[8] = {{1, -2}, {2, -1}, {2, 1}, {1, 2},
{-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}};




int knight(int row, int col, point pos,int** board,int** path,int counter);
void printTour(int row,int col,int** path);
void main()
{
	int datacase = 0;
	FILE* infile = fopen("input.txt","r");
	int i = 0;
	fscanf(infile, "%d", &datacase);

	for(i=0; i<datacase; i++)
	{
		int row=0, col=0, j=0,m=0;
		point start;
		int **board = NULL;
		int **path = NULL;
		fscanf(infile,"%d %d",&row,&col);
		board = (int**)malloc(sizeof(int*)*(row+1));
		path =(int**)malloc(sizeof(int*)*(row+1));
		for(j=1; j<=row; j++) 
		{
			board[j]=(int*)malloc(sizeof(int)*(col+1));
			path[j]=(int*)malloc(sizeof(int)*(col+1));
		} 
		fscanf(infile,"%d %d",&(start.y),&(start.x));
		for (j=1; j<=row; j++)
			for (m=1; m<=col; m++)
				board[j][m] = UNMARK;
		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;
		if ( knight(row,col,start,board,path,1) )
			printTour(row,col,path);
			
		else printf("0\n");
		free(board);
		free(path);
	}

}
int knight(int row , int col , point pos ,int** board, int** path,int counter)
{
	int i;
	point next;
	if (counter == row*col)
		return 1;
	for (i=0; i<8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;
		if ( next.x > 0 && next.x <= col &&
		     next.y > 0 && next.y <= row &&
		     board[next.y][next.x] != MARK )
		{
			board[next.y][next.x] = MARK;
			path[next.y][next.x] = counter+1;
			if ( knight(row,col,next,board,path,counter+1) )
				return 1;
			board[next.y][next.x] = UNMARK;
		}
	}
	return 0;
}
void printTour(int row , int col ,int** path)
{
	int i = 0, j=0;
	printf( "%d\n",1);
	for(i=1; i<=row; i++)
	{
		for(j=1; j<=col; j++)
			 printf("%2d ",path[i][j]);
	printf("\n");
	}

}


