#include <iostream>
#include <algorithm>
#include <fstream>
#define INF 987654321
using namespace std;
 
int t;
int m, n, l, g;
int toRight[100][100];
int toDown[100][100];
int dp[100][100][200][2];
 
int main(void) {
    ifstream fp;
    fp.open("input.txt");
    fp >> t;
    while (t--) {
        fp >> m >> n >> l >> g;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                for (int k = 0; k < 200; k++)
                    dp[i][j][k][0] = dp[i][j][k][1] = INF;
                     
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n-1; j++)
                fp >> toRight[i][j];
         
        for (int i = 0; i < m-1; i++)
            for (int j = 0; j < n; j++)
                fp >> toDown[i][j];
         
        dp[0][0][0][0] = dp[0][0][0][1] = 0;
        for (int i = 1; i < m; i++)
            dp[i][0][0][0] = dp[i-1][0][0][0] + toDown[i-1][0];
        for (int i = 1; i < n; i++)
            dp[0][i][0][1] = dp[0][i-1][0][1] + toRight[0][i-1];
             
        for (int i = 1; i < m; i++)
            for (int j = 1; j < n; j++) {
                int end = (i == j) ? 2*i-1 : 2*min(i, j);
                for (int nBend = 1; nBend <= end; nBend++) {
                    dp[i][j][nBend][0] = min(dp[i-1][j][nBend][0], dp[i-1][j][nBend-1][1]) + toDown[i-1][j];
                    dp[i][j][nBend][1] = min(dp[i][j-1][nBend][1], dp[i][j-1][nBend-1][0]) + toRight[i][j-1];
                }
            }
         
        for (int i = 1; i < 200; i++) {
            if (dp[m-1][n-1][i][0] <= g || dp[m-1][n-1][i][1] <= g) {
                cout << l * (m+n-2) + i << endl;
                break;
            }
            if (i == 199) cout << -1 << endl;
        }
    }
    fp.close();
    return 0;

}
