

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cmath>

bool getducci(std::fstream &infile,int arraysize);
int *makeducci(int ducciarray[1000][15], int arraysize, int loopcount);
bool checkend(int *checkarray, int arraysize);
bool isLoop(int ducciarray[1000][15], int arraysize, int count);
bool isArraySame(int *arry, int *brry, int arraysize);

int main()
{
	std::fstream infile;
	infile.open("input.txt");
	if (infile.fail())
	{
		std::cerr << "input file error";
		exit(1);
	}
	int testcase;
	infile >> testcase;
	for (int i = 0; i < testcase; i++)
	{
		int arraysize;
		infile >> arraysize;
		getducci(infile, arraysize);
	}
	return 0;
}
bool getducci(std::fstream &infile, int arraysize)
{
	int ducciarray[1000][15];
	int loopcount = 0;
	bool iszero = false;
	bool isloop = false;
	for (int i = 0; i < arraysize; i++)
	{
		infile >> ducciarray[0][i];
	}
	while (!isloop)
	{
		int *returnarray = makeducci(ducciarray, arraysize, loopcount);
		loopcount++;
		iszero = checkend(returnarray, arraysize);
		if (iszero)
		{
			std::cout << "ZERO" << std::endl;
			return true;
		}
		for (int i = 0; i < arraysize; i++)
		{
			ducciarray[loopcount][i] = returnarray[i];
		}
		if (loopcount % 10 == 0)
		{
			isloop = isLoop(ducciarray, arraysize, loopcount);
		}
	}
	std::cout << "LOOP" << std::endl;
	return false;
}

int *makeducci(int ducciarray[1000][15], int arraysize, int loopcount)
{
	int *returnarray = new int[15];
	for (int i = 0; i < arraysize; i++)
	{
		if (i < arraysize - 1)
		{
			returnarray[i] = abs(ducciarray[loopcount][i] - ducciarray[loopcount][i + 1]);
		}
		else
		{
			returnarray[i] = abs(ducciarray[loopcount][i] - ducciarray[loopcount][0]);
		}
	}
	return returnarray;
}
bool checkend(int *checkarray, int arraysize)
{
	for (int i = 0; i < arraysize-1; i++)
	{
		if (checkarray[i] != checkarray[i + 1])
			return false;
	}
	return true;
}
bool isLoop(int ducciarray[1000][15], int arraysize, int count)
{
	for (int i = 0; i < count; i++)
	{
		if (isArraySame(ducciarray[i], ducciarray[count], arraysize))
			return true;
	}
	return false;
}

bool isArraySame(int *arry, int *brry, int arraysize)
{
	
	for (int i = 0; i < arraysize; i++)
	{
		if (arry[i] != brry[i]) return false;
	}
	return true;
}
