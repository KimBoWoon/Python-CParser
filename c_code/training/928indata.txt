#include <iostream>
#include <fstream>
#include <memory.h>

#define MIN(a,b) ((a)<(b)?(a):(b))
class CardGame
{
private:
	int numOfCards;
	int* cards;
	int** score;
	int** sum;
public:
	CardGame(const int& n, const int c[]) :numOfCards(n)
	{
		cards = new int[numOfCards];
		memcpy(cards, c, sizeof(int)*numOfCards);

		score = new int*[numOfCards];
		sum = new int*[numOfCards];
		for (int i = 0; i < numOfCards; i++)
		{
			score[i] = new int[numOfCards];
			sum[i] = new int[numOfCards];
		}
	}
	int pick()
	{
		for (int i = 0; i < numOfCards; i++)
			for (int j = i; j > -1; j --)
				if (i == j)
				{
					sum[i][j] = cards[i];
					score[i][j] = cards[i];
				}
				else if (j + 1 == i)
				{
					sum[i][j] = sum[i-1][j] + cards[i];
					score[i][j] = cards[i] > cards[j] ? cards[i] : cards[j];
				}
				else
				{
					sum[i][j] = sum[i-1][j] + cards[i];
					score[i][j] = sum[i][j] - MIN(score[i-1][j], score[i][j+1]);
				}

		return score[numOfCards-1][0];
	}
	~CardGame()
	{
		delete[] cards;
		for (int i = 0; i < numOfCards; i++)
		{
			delete[] score[i];
			delete[] sum[i];
		}
		delete[] score;
		delete[] sum;
	}
};

int main()
{
	std::ifstream input;
	input.open("input.txt");
	if (input.fail())
		return -1;
	int numOfCase;
	input >> numOfCase;
	for (int i = 0; i < numOfCase; i++)
	{
		int numOfCard;
		input >> numOfCard;
		int cards[1000];
		for (int j = 0; j < numOfCard; j++)
			input >> cards[j];
		CardGame c(numOfCard, cards);
		std::cout << c.pick() << std::endl;
	}

	return 0;
}