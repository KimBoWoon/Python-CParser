#include <stdio.h>
#include <stdlib.h>
#define MARK 1
#define UNMARK 0
typedef struct Point { int x, y; } point;
point direction[8] = { { 1, -2 }, { 2, -1 }, { 2, 1 }, { 1, 2 },
{ -1, 2 }, { -2, 1 }, { -2, -1 }, { -1, -2 } };

void printTour(int **path, int m, int n);
int knightTour(int **board, int **path, int m, int n, point pos, int counter);

int main() {
	int t, i, j, m, n;
	point start;
	int **board, **path;
	FILE *fp = fopen("input.txt", "r");
	fscanf(fp, "%d", &t);

	while (t--) {
		fscanf(fp, "%d %d", &m, &n);
		fscanf(fp, "%d %d", &start.y, &start.x);

		board = (int **)malloc(sizeof(int*) * (m + 1));
		path  = (int **)malloc(sizeof(int*) * (m + 1));

		for (i = 0; i < m + 1; i++) {
			board[i] = (int *)malloc(sizeof(int) * (n + 1));
			path[i]  = (int *)malloc(sizeof(int) * (n + 1));
		}

		for (i = 1; i <= m; i++)
			for (j = 1; j<=n; j++)
				board[i][j] = UNMARK;
		board[start.y][start.x] = MARK;
		path[start.y][start.x] = 1;
		if (knightTour(board, path, m, n, start, 1)) {
			printf("1\n");
			printTour(path, m, n);
		}
		else
			printf("0\n");

		for (i = 0; i < m + 1; i++) {
			free(board[i]);
			free(path[i]);
		}
		free(board);
		free(path);
	}
	fclose(fp);
	return 0;
}

int knightTour(int **board, int **path, int m, int n, point pos, int counter)
{
	int i;
	point next;
	if (counter == m * n)
		return 1;
	for (i = 0; i < 8; i++)
	{
		next.x = pos.x + direction[i].x;
		next.y = pos.y + direction[i].y;
		if (next.x > 0 && next.x <= n && next.y > 0 && next.y <= m &&
			board[next.y][next.x] != MARK)
		{
			board[next.y][next.x] = MARK;
			path[next.y][next.x] = counter + 1;
			if (knightTour(board, path, m, n, next, counter + 1))
				return 1;
			board[next.y][next.x] = UNMARK;
		}
	}
	return 0;
}

void printTour(int **path, int m, int n) {
	int a = 0, b = 0;
	for (a = 1; a <= m; a++) {
		for (b = 1; b <= n; b++) {
				printf("%2d ", path[a][b]);
		}
		printf("\n");
	}
}